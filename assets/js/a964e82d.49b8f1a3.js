"use strict";(self.webpackChunkdocumentacion_2=self.webpackChunkdocumentacion_2||[]).push([[762],{7844:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>t});var r=a(4848),s=a(8453);const i={sidebar_position:1},o="Nest",l={id:"nest/README",title:"Nest",description:"- Es un framework que est\xe1 desarrollado con typescript para crear aplicaciones web backend.",source:"@site/docs/nest/README.md",sourceDirName:"nest",slug:"/nest/",permalink:"/documentacion2/docs/nest/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nest/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar"},c={},t=[{value:"Comandos",id:"comandos",level:2},{value:"Estructura de archivos",id:"estructura-de-archivos",level:2},{value:"Archivos de Nest.js",id:"archivos-de-nestjs",level:2},{value:"Modulo",id:"modulo",level:4},{value:"Controller",id:"controller",level:4},{value:"Service",id:"service",level:4},{value:"DTO",id:"dto",level:4},{value:"Interceptors",id:"interceptors",level:4},{value:"Archivos principales",id:"archivos-principales",level:2},{value:"Modulo",id:"modulo-1",level:2},{value:"Crear m\xf3dulo",id:"crear-m\xf3dulo",level:4},{value:"Controlador",id:"controlador",level:2},{value:"Asignar endpoint",id:"asignar-endpoint",level:2},{value:"Tipo de petici\xf3n",id:"tipo-de-petici\xf3n",level:4},{value:"Servicio",id:"servicio",level:2},{value:"Proveedores",id:"proveedores",level:4},{value:"Servicio",id:"servicio-1",level:4},{value:"Inyecci\xf3n de dependencia",id:"inyecci\xf3n-de-dependencia",level:4},{value:"Ejemplo para entenderlo",id:"ejemplo-para-entenderlo",level:4},{value:"Abreviaci\xf3n",id:"abreviaci\xf3n",level:4},{value:"Response",id:"response",level:2},{value:"1- Por defecto (Lo maneja Nest)",id:"1--por-defecto-lo-maneja-nest",level:4},{value:"2- Utilizar la sintaxis de express",id:"2--utilizar-la-sintaxis-de-express",level:4},{value:"M\xe9todos de respuesta",id:"m\xe9todos-de-respuesta",level:4},{value:"Http status error",id:"http-status-error",level:4},{value:"HttpException",id:"httpexception",level:4},{value:"Body",id:"body",level:2},{value:"Query",id:"query",level:2},{value:"Params",id:"params",level:2},{value:"Dto y Validaci\xf3n",id:"dto-y-validaci\xf3n",level:2},{value:"Dto",id:"dto-1",level:4},{value:"Validaci\xf3n",id:"validaci\xf3n",level:4},{value:"Especificar validaciones",id:"especificar-validaciones",level:5},{value:"Implementar validaciones",id:"implementar-validaciones",level:5},{value:"Whitelist",id:"whitelist",level:5},{value:"Pipe",id:"pipe",level:2},{value:"\xbfPor qu\xe9 se llaman tuber\xeda?",id:"por-qu\xe9-se-llaman-tuber\xeda",level:4},{value:"Pipes predefinidos",id:"pipes-predefinidos",level:4},{value:"Pipe personalizado",id:"pipe-personalizado",level:4},{value:"Guards",id:"guards",level:2},{value:"Diferencia con middleware",id:"diferencia-con-middleware",level:4},{value:"Crear un guard",id:"crear-un-guard",level:4},{value:"Implementar guards",id:"implementar-guards",level:4},{value:"Middleware",id:"middleware",level:2},{value:"Generar middleware",id:"generar-middleware",level:4},{value:"Implementar middleware",id:"implementar-middleware",level:4},{value:"Ejemplo de un Middleware de autenticaci\xf3n",id:"ejemplo-de-un-middleware-de-autenticaci\xf3n",level:4},{value:"Interceptors",id:"interceptors-1",level:2},{value:"Metodo intercept()",id:"metodo-intercept",level:4},{value:"Primer ejemplo",id:"primer-ejemplo",level:4},{value:"Interceptor global",id:"interceptor-global",level:4},{value:"Segundo ejemplo",id:"segundo-ejemplo",level:4},{value:"Base de datos prisma",id:"base-de-datos-prisma",level:2},{value:"\xbfQu\xe9 hace Prisma?",id:"qu\xe9-hace-prisma",level:4},{value:"Instalamos prisma",id:"instalamos-prisma",level:4},{value:"Ejecutamos una BD en Postgesql en docker",id:"ejecutamos-una-bd-en-postgesql-en-docker",level:4},{value:"Archivo .env",id:"archivo-env",level:4},{value:"Schema.prisma",id:"schemaprisma",level:4},{value:"Comando migrate",id:"comando-migrate",level:4},{value:"Servicio para conectarte a la Base de datos",id:"servicio-para-conectarte-a-la-base-de-datos",level:4},{value:"A probar el c\xf3digo!",id:"a-probar-el-c\xf3digo",level:4},{value:"Swagger",id:"swagger",level:2},{value:"Lo instalamos en el proyecto",id:"lo-instalamos-en-el-proyecto",level:4},{value:"Decoradores",id:"decoradores",level:4},{value:"Comandos",id:"comandos-1",level:2},{value:"Generate",id:"generate",level:4},{value:"Generate resource",id:"generate-resource",level:4},{value:"Cors",id:"cors",level:2},{value:"Lifecycle Events",id:"lifecycle-events",level:2},{value:"1- M\xf3dulos",id:"1--m\xf3dulos",level:4},{value:"2- Inyecci\xf3n de dependencias",id:"2--inyecci\xf3n-de-dependencias",level:4},{value:"1- Servicio Singleton (Instancia \xfanica)",id:"1--servicio-singleton-instancia-\xfanica",level:5},{value:"2- Servicio Transitorio (Vida corta)",id:"2--servicio-transitorio-vida-corta",level:5},{value:"3- Controladores",id:"3--controladores",level:4},{value:"Creaci\xf3n del controlador",id:"creaci\xf3n-del-controlador",level:5},{value:"Manejo de la solicitud",id:"manejo-de-la-solicitud",level:5},{value:"Finalizaci\xf3n de la solicitud",id:"finalizaci\xf3n-de-la-solicitud",level:5},{value:"Destrucci\xf3n",id:"destrucci\xf3n",level:5},{value:"Middleware y Guards",id:"middleware-y-guards",level:4},{value:"Hooks",id:"hooks",level:4},{value:"Entity",id:"entity",level:2},{value:"Diferencia con DTO",id:"diferencia-con-dto",level:4},{value:"Prop\xf3sito",id:"prop\xf3sito",level:5},{value:"Interraci\xf3n",id:"interraci\xf3n",level:5},{value:"Estructura y decoradores",id:"estructura-y-decoradores",level:5}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nest",children:"Nest"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es un framework que est\xe1 desarrollado con typescript para crear aplicaciones web backend."}),"\n",(0,r.jsx)(n.li,{children:"Combina elementos de programaci\xf3n funcional, POO y programaci\xf3n reactiva."}),"\n",(0,r.jsx)(n.li,{children:"Aplica los conceptos de Angular, pero en el backend."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"comandos",children:"Comandos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instalamos el CLI para gestionar los proyectos de Next.js con el siguiente comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npm i -g @nestjs/cli\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para crear un proyecto:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest new nombre-proyecto\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para ver la versi\xf3n de nest:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest -v\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para construir(compilar) la aplicaci\xf3n:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest build\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para iniciar la aplicaci\xf3n (incluye el proceso de compilaci\xf3n):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest start\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para ver informaci\xf3n de los comandos:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para iniciar la aplicaci\xf3n y que se refresque si encuentra alg\xfan cambio (para iniciar modo desarrollo):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest start --watch\n"})}),"\n",(0,r.jsx)(n.h2,{id:"estructura-de-archivos",children:"Estructura de archivos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Carpeta dist: Ac\xe1 esta todo el c\xf3digo Javascript que se ejecuta en un servidor."}),"\n",(0,r.jsx)(n.li,{children:"Carpeta src: Aca esta ubicado todo el c\xf3digo de backend."}),"\n",(0,r.jsx)(n.li,{children:"Carpeta test: Sirve para crear test para probar toda la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"tsconfig.json: Para configurar las reglas bases de Typescript"}),"\n",(0,r.jsx)(n.li,{children:"tsconfig.build.json : Sirve para configurar \u201creglas extras\u201d que se aplican en producci\xf3n."}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{title:"Iconos de Angular",type:"warning",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En Visual studio code en algunos archivos esta el icono de Angular."}),"\n",(0,r.jsxs)(n.li,{children:["Para arreglarlo:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pulsamos F1"}),"\n",(0,r.jsx)(n.li,{children:"Escribimos: Open Workspace Settings"}),"\n",(0,r.jsx)(n.li,{children:"En el json, escribimos lo siguiente:"}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n    "material-icon-theme.activeIconPack": "nest"\r\n}\r\n\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"archivos-de-nestjs",children:"Archivos de Nest.js"}),"\n",(0,r.jsx)(n.h4,{id:"modulo",children:"Modulo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Una Aplicaci\xf3n NEST consiste en un conjunto de m\xf3dulos."}),"\n",(0,r.jsx)(n.li,{children:"Un m\xf3dulo en NestJS es como una caja donde guardas todo lo relacionado con una parte espec\xedfica de tu aplicaci\xf3n. Por ejemplo, si est\xe1s creando una aplicaci\xf3n que maneja usuarios, podr\xedas tener un m\xf3dulo que agrupe todo lo necesario para trabajar con los usuarios: c\xf3mo manejarlos, qu\xe9 hacer cuando alguien se registra, etc. Este m\xf3dulo se encarga de mantener todo lo relacionado con los usuarios bien organizado y f\xe1cil de encontrar."}),"\n",(0,r.jsxs)(n.li,{children:["Un m\xf3dulo se enfoca en manejar la l\xf3gica de una tarea espec\xedfica dentro de la aplicaci\xf3n, como la autenticaci\xf3n, la gesti\xf3n de productos o de usuarios, manteniendo cada tarea separada de las dem\xe1s.\r\nCada m\xf3dulo contiene:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"controller"}),"\n",(0,r.jsx)(n.li,{children:"service"}),"\n",(0,r.jsx)(n.li,{children:"dto"}),"\n",(0,r.jsx)(n.li,{children:"interceptor"}),"\n",(0,r.jsx)(n.li,{children:"etc"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"controller",children:"Controller"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contiene funciones que se van a ejecutar cuando una url es visitada."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://flevatti.github.io/documentacion/docs/C--/API#controlador-teoria",children:"Mas informaci\xf3n"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"service",children:"Service"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Son funciones que se pueden utilizar en diferentes controladores."}),"\n",(0,r.jsx)(n.li,{children:"Contiene la l\xf3gica reutilizable."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"dto",children:"DTO"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contiene la descripci\xf3n de c\xf3mo se van a recibir los datos en el backend."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"interceptors",children:"Interceptors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Son funciones que se ejecutan antes o despues del controlador."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"los archivos que terminan en .spec.ts en NestJS son espec\xedficamente para probar y asegurarse de que el m\xf3dulo y sus componentes funcionen correctamente. Estos archivos contienen pruebas automatizadas que ayudan a verificar que el c\xf3digo se comporte como se espera."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"archivos-principales",children:"Archivos principales"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="app.module.ts"',children:"import { Module } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\n\r\n@Module({\r\n  imports: [],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Este es el m\xf3dulo que utiliza la aplicaci\xf3n de Nest.JS para construir e iniciar la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Este es el m\xf3dulo que va a contener todos los m\xf3dulos, controladores, servicios, etc que va a tener la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Contiene un controlador que gestiona las solicitudes y un proveedor que b\xe1sicamente su funci\xf3n es \u201cimportar funciones\u201d de un servicio para que el controlador la pueda usar."}),"\n"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="main.ts"',children:"import { Module } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\n\r\n@Module({\r\n  imports: [],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es el archivo que arranca la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"La funci\xf3n NestFactory.create() crea la app y como par\xe1metro recibe el m\xf3dulo principal que se va a usar en el proceso de compilaci\xf3n y ejecuci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Con el m\xe9todo listen() la aplicaci\xf3n empieza a escuchar en el puerto que le especificamos."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"modulo-1",children:"Modulo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un m\xf3dulo es una clase con el decorador @Module el cual proporciona metadatos que Nest utiliza para organizar la estructura de la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Cada aplicaci\xf3n tiene al menos un m\xf3dulo, un m\xf3dulo ra\xedz. El m\xf3dulo ra\xedz es el punto de partida que utiliza Nest para crear el gr\xe1fico de la aplicaci\xf3n: la estructura de datos interna que utiliza Nest para resolver las relaciones y dependencias entre m\xf3dulos y proveedores. Si bien, en teor\xeda, las aplicaciones muy peque\xf1as pueden tener solo el m\xf3dulo ra\xedz, este no es el caso t\xedpico. Queremos enfatizar que los m\xf3dulos son muy recomendables como una forma eficaz de organizar los componentes. Por lo tanto, para la mayor\xeda de las aplicaciones, la arquitectura resultante emplear\xe1 varios m\xf3dulos, cada uno de los cuales encapsular\xe1 un conjunto de capacidades estrechamente relacionadas."}),"\n",(0,r.jsxs)(n.li,{children:["El decorador  @Module() toma un \xfanico objeto cuyas propiedades describen el m\xf3dulo:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"providers:\tLos \u201cservicios\u201d que utilizara el modulo."}),"\n",(0,r.jsx)(n.li,{children:"controllers:\tLos \u201ccontroladores\u201d que usara el modulo."}),"\n",(0,r.jsx)(n.li,{children:"imports:\tUna lista de m\xf3dulos que se importaran a este m\xf3dulo. Lo que se importa sobre todo son los proveedores de otros m\xf3dulos para poder usarlo en este. El M\xf3dulo principal deber\xe1 importar todos los m\xf3dulos que va a usar la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"exports:\tUna lista de \u201cproviders\u201d de este m\xf3dulo. Especifica los providers que se exportan para que otros modulos los pueden usar al importar."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"crear-m\xf3dulo",children:"Crear m\xf3dulo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el siguiente comando creamos un m\xf3dulo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest generate module [nombreModulo]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Al ejecutar el comando, se crear\xe1 una carpeta en src que contendr\xe1 toda la l\xf3gica que usara el m\xf3dulo (al principio estar\xe1 vac\xeda pero cuando le a\xf1adas controladores, servicios, etc se llenara)."}),"\n"]})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para que desaparezcan los errores de Eslint si usamos Windows, escribimos lo siguiente en .eslintrc , debajo del apartado de rules:"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"  rules: {\r\n    '@typescript-eslint/interface-name-prefix': 'off',\r\n    '@typescript-eslint/explicit-function-return-type': 'off',\r\n    '@typescript-eslint/explicit-module-boundary-types': 'off',\r\n    '@typescript-eslint/no-explicit-any': 'off',\r\n  },\r\n  \"prettier/prettier\" : [\r\n    \"error\" , {\r\n      \"endOfLine\" : \"auto\"\r\n    }\r\n  ]\r\n};\r\n\n"})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El archivo que representa el m\xf3dulo termina en .module.ts y contiene lo siguiente:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class TasksModule {}\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es una clase con un decorador que contiene un objeto vacio (sin metadatos)."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El app.module.ts :"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"\r\nimport { Module } from '@nestjs/common';\r\nimport { TasksModule } from './tasks/tasks.module';\r\n@Module({\r\n  imports: [TasksModule],\r\n\r\n})\r\nexport class AppModule {}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La propiedad imports del decorador recibe un array con todos los m\xf3dulos que se \u201cimportara\u201d."}),"\n",(0,r.jsx)(n.li,{children:'La propiedad imports se utiliza para traer otros m\xf3dulos que el m\xf3dulo actual necesita para funcionar. Es como decirle al m\xf3dulo: "Para hacer mi trabajo, necesito usar las funcionalidades de estos otros m\xf3dulos."'}),"\n",(0,r.jsx)(n.li,{children:"La propiedad imports en un m\xf3dulo de NestJS se utiliza para importar otros m\xf3dulos que contienen los proveedores que el m\xf3dulo actual necesita. Cuando un m\xf3dulo es importado a trav\xe9s de imports, sus proveedores se vuelven accesibles para ser inyectados en los componentes del m\xf3dulo que realiza la importaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"En este caso el m\xf3dulo principal importa el m\xf3dulo TasksModule para que se pueda utilizar en la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Es importante importar todos los m\xf3dulos que se van a utilizar en la aplicaci\xf3n en el m\xf3dulo principal."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"controlador",children:"Controlador"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Se genera con el siguiente comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest generate controller [NombreController]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si lo creas con el mismo nombre que el m\xf3dulo, se crea en la carpeta asignada al m\xf3dulo y hace las configuraciones correspondientes en este."}),"\n",(0,r.jsx)(n.li,{children:"El comando genera dos archivos: uno que termina en controller.ts (el controlador) y otro que termina en spec.ts (para testear el controlador)."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El controlador se ver\xeda as\xed:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller } from '@nestjs/common';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es una clase con un decorador que recibe como par\xe1metro el nombre del controlador (representa la ruta base para las peticiones HTTP que el m\xf3dulo gestionara)."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Y en el m\xf3dulo que tiene el mismo nombre, lo a\xf1adimos (\xe9l  comando lo hace solo):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Module } from '@nestjs/common';\r\nimport { TasksController } from './tasks.controller';\r\n\r\n@Module({\r\n  controllers: [TasksController]\r\n})\r\nexport class TasksModule {}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La propiedad controllers del decorador es un array con todos los controladores que va a contener el m\xf3dulo."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"asignar-endpoint",children:"Asignar endpoint"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A trav\xe9s de la clase del controlador, podemos asignar varios endpoint (rutas) que va a gestionar ese controlador:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller, Get } from '@nestjs/common';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n    @Get('/')\r\n   getAllTasks(){\r\n       return 'Obteniendo todas las tareas'\r\n   }\r\n\r\n}\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["getAllTask es una funci\xf3n se ejecuta durante la petici\xf3n GET ",(0,r.jsx)(n.a,{href:"http://localhost:3000/tasks",children:"http://localhost:3000/tasks"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Su decorador especifica el tipo de petici\xf3n (GET, POST, DELETE, ETC) y su par\xe1metro la ruta (endpoint) que va a gestionar ese m\xe9todo.  Acordate que se concatena con la ruta base (nombre del controlador)."}),"\n",(0,r.jsx)(n.li,{children:"Al especificar \u2018/\u2019 estamos dici\xe9ndole que sea la ruta base (nombre controlador)."}),"\n",(0,r.jsx)(n.li,{children:"Cada m\xe9todo de la clase controlador se suele llamar endpoint. El m\xe9todo en si es lo que se ejecuta cuando hacemos una petici\xf3n al endpoint."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"tipo-de-petici\xf3n",children:"Tipo de petici\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hay un decorador para cada tipo de petici\xf3n, pero todos como primer par\xe1metro reciben la ruta(endpoint) que va a gestionar el m\xe9todo decorado."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller, Delete, Get, Patch, Post, Put } from '@nestjs/common';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n\r\n    @Get('/')\r\n   getAllTasks(){\r\n        return 'Obteniendo todas las tareas'\r\n   }\r\n\r\n   \r\n   @Post('/')\r\n   createTask(){\r\n    return 'Creando tarea'\r\n   }\r\n   \r\n   @Put('/')\r\n   updateTask(){\r\n    return 'Actualizando tarea'\r\n   }\r\n   \r\n\r\n   @Delete('/')\r\n   deleteTask(){\r\n     return 'Eliminando tarea';\r\n   }\r\n\r\n   @Patch('/')\r\n   pathTask(){\r\n     return 'Modificando tarea';\r\n   }\r\n\r\n}\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"servicio",children:"Servicio"}),"\n",(0,r.jsx)(n.h4,{id:"proveedores",children:"Proveedores"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Proveedores son un concepto clave en NestJS. Se refiere a cualquier clase que pueda ser inyectada como una dependencia (el concepto se denomina inyecci\xf3n de dependencia) dentro de otra clase. Los proveedores incluyen servicios, repositorios, f\xe1bricas, ayudantes, y otras clases que se usan para cumplir una funci\xf3n espec\xedfica dentro de la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:'La idea principal detr\xe1s de un proveedor es que permite establecer relaciones entre diferentes objetos de la aplicaci\xf3n de manera autom\xe1tica y eficiente, delegando la responsabilidad de "conectar" estos objetos al sistema de ejecuci\xf3n de Nest.'}),"\n",(0,r.jsx)(n.li,{children:"NestJS usa un patr\xf3n de dise\xf1o llamado inyecci\xf3n de dependencias, que facilita la gesti\xf3n de dependencias. Gracias a TypeScript, Nest puede resolver y gestionar estas dependencias simplemente por tipo, lo que simplifica el c\xf3digo y reduce errores."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"servicio-1",children:"Servicio"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Son un tipo espec\xedfico de proveedor en NestJS. Se encargan de contener la l\xf3gica de negocio de la aplicaci\xf3n. Los servicios realizan tareas como acceder a bases de datos, interactuar con APIs externas, realizar c\xe1lculos, entre otras."}),"\n",(0,r.jsx)(n.li,{children:"Al ser proveedores, los servicios pueden ser inyectados en otros componentes, como controladores o incluso otros servicios, utilizando el sistema de inyecci\xf3n de dependencias de Nest."}),"\n",(0,r.jsx)(n.li,{children:"La inyecci\xf3n de dependencias en NestJS permite que los servicios se conecten f\xe1cilmente con otros componentes de la aplicaci\xf3n, lo que mejora el modularidad y facilita el mantenimiento del c\xf3digo."}),"\n",(0,r.jsx)(n.li,{children:'Un servicio en NestJS es una clase que contiene l\xf3gica reutilizable. Esto significa que agrupa funciones o m\xe9todos que realizan tareas espec\xedficas y que pueden ser usadas en diferentes partes de la aplicaci\xf3n. En lugar de repetir la misma l\xf3gica en m\xfaltiples lugares, puedes definirla una vez en un servicio y luego simplemente "llamar" a ese servicio desde cualquier parte de la aplicaci\xf3n que lo necesite.'}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"inyecci\xf3n-de-dependencia",children:"Inyecci\xf3n de dependencia"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inyecci\xf3n de Dependencias es un patr\xf3n de dise\xf1o que se usa para gestionar las dependencias entre clases en una aplicaci\xf3n. En NestJS, esto se realiza a trav\xe9s del sistema de inyecci\xf3n de dependencias que facilita la creaci\xf3n y gesti\xf3n de instancias de clases."}),"\n",(0,r.jsxs)(n.li,{children:["Entonces la inyecci\xf3n de dependencia tiene tres conceptos:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instancias Inyectables: Te permite utilizar instancias (que corresponden a una clase que sea inyectable (especificado por su decorador)) para realizar operaciones."}),"\n",(0,r.jsx)(n.li,{children:"Uso de funciones/M\xe9todos: B\xe1sicamente estas importando \u201cfunciones/m\xe9todos\u201d que ya alg\xfan proveedor (servicio, por ejemplo) las creo para usarlas."}),"\n",(0,r.jsx)(n.li,{children:"Constructor: Estas \u201cinstancias\u201d el programador las especifica en el constructor de la clase y Nest.js se encarga de crearlas y gestionarla para que las puedas usar. Lo \xfanico que necesita Nest para saber que instanciar es el tipo de dato de la clase inyectable que se necesita."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"ejemplo-para-entenderlo",children:"Ejemplo para entenderlo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El comando para crear un servicio es:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest generate service [NombreServicio]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si lo creas con el mismo nombre que el m\xf3dulo, se crea en la carpeta asignada al m\xf3dulo y hace las configuraciones correspondientes en este."}),"\n",(0,r.jsx)(n.li,{children:"Un servicio es un archivo que termina en \u201c.service.ts\u201d"}),"\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n generara uno que termina en spec.ts (para testear el servicio)."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entonces en el servicio:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class TasksService {\r\n   \r\n    getTasks(){\r\n         return ['Task 1' , 'Task 2' , 'Task 3'];\r\n    }\r\n    \r\n\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La clase est\xe1 decorada con el decorador Inyectable para que se pueda acceder a los m\xe9todos que contenga desde otras partes de la aplicaci\xf3n"}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En el m\xf3dulo tenemos que configurar que proveedor se va a usar (el comando lo hace solo):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Module } from '@nestjs/common';\r\nimport { TasksController } from './tasks.controller';\r\nimport { TasksService } from './tasks/tasks.service';\r\n\r\n@Module({\r\n  controllers: [TasksController],\r\n  providers: [TasksService]\r\n})\r\nexport class TasksModule {}\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"providers es un array que recibe las diferentes clases inyectables (contiene el decorador @ Injectable) que pueden usar todos los componentes del m\xf3dulo."}),"\n",(0,r.jsx)(n.li,{children:"Ahora podemos usar una instancia de la clase Inyectable en el controlador TasksController."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ahora usemos la clase inyectable en el controlador (es un componente del m\xf3dulo y por lo tanto la puede usar):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller, Get } from '@nestjs/common';\r\nimport { TasksService } from './tasks/tasks.service';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n    taskService : TasksService\r\n    constructor(taskService : TasksService){\r\n        this.taskService = taskService;\r\n    }\r\n\r\n    @Get('/')\r\n   getAllTasks(){\r\n       return this.taskService.getTasks();\r\n   }\r\n\r\n \r\n\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En los par\xe1metros del constructor especificamos las clases inyectables que necesitamos, esto se realiza mediante el tipo de dato."}),"\n",(0,r.jsx)(n.li,{children:"Cuando se inicia la aplicaci\xf3n, Nest.js utiliza los tipos de datos que especificamos en el constructor, para generar las instancias de las clases inyectables que especificamos."}),"\n",(0,r.jsx)(n.li,{children:"Se podr\xeda decir que Nest.js se la ingenia para invocar al constructor que especificamos con los \u201cpar\xe1metros\u201d que declaramos."}),"\n",(0,r.jsx)(n.li,{children:"Nest.js busca en el array providers del m\xf3dulo para encontrar una clase que coincida con el tipo de dato especificado en el constructor. Si la encuentra, crea una instancia de la clase encontrada en el array providers y la pasa al constructor de la clase que la necesita. Si no la encuentra, NestJS no podr\xe1 proporcionar una instancia para ese tipo. Como resultado, la aplicaci\xf3n fallar\xe1 al intentar crear una instancia del controlador o servicio que lo requiere, generando un error."}),"\n",(0,r.jsx)(n.li,{children:"Entonces en este ejemplo Nest.js genera la instancia de la clase inyectable, invoca el constructor con la instancia y nosotros se la asignamos a la variable taskService para poder usarla en el endpoint."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"abreviaci\xf3n",children:"Abreviaci\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hay otra manera de usar un inyectable, para esto hacemos lo siguiente."}),"\n",(0,r.jsx)(n.li,{children:"En el servicio:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class TasksService {\r\n    \r\n   private service = ['Task 1' , 'Task 2' , 'Task 3']\r\n\r\n    getTasks(){\r\n         return this.service;\r\n    }\r\n\r\n}\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En el controlador:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller, Get } from '@nestjs/common';\r\nimport { TasksService } from './tasks/tasks.service';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n\r\n    constructor(private taskService : TasksService){}\r\n\r\n    @Get('/')\r\n   getAllTasks(){\r\n       return this.taskService.getTasks();\r\n   }\r\n\r\n \r\n\r\n}\r\n\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con la palabra reservada \u201cprivate\u201d le decimos a Nest que nos cree una variable llamada taskService (nombre del par\xe1metro) que contenga la instancia de la clase inyectable que estamos solicitando."}),"\n",(0,r.jsx)(n.li,{children:"De esta manera nos ahorramos l\xf3gica en el constructor."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"response",children:"Response"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un m\xe9todo de un controlador debe retornar algo, \xf3sea una respuesta a la petici\xf3n que se hace."}),"\n",(0,r.jsx)(n.li,{children:"Nest emplea dos maneras diferentes para enviar una respuesta."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"1--por-defecto-lo-maneja-nest",children:"1- Por defecto (Lo maneja Nest)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si se devuelve un objeto o un array, se serializa autom\xe1ticamente en JSON. Sin embargo cuando se devuelve un tipo primitivo de Javascript (String , number , boolean , etc) , Nest enviara solo el valor sin intentar serializarlo."}),"\n",(0,r.jsx)(n.li,{children:"El c\xf3digo de estado de la respuesta siempre es 200 de forma predeterminada, excepto para las solicitudes POST que usan 201. Aunque esto podemos cambiarlo con el decorador @HttpCode()."}),"\n",(0,r.jsx)(n.li,{children:"Si lanzas un error que no corresponda a uno que maneja Nest (\u201cthrow new Error\u201d) acabas con la ejecuci\xf3n del programa y como como respuesta devuelves el c\xf3digo de estado  500."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2--utilizar-la-sintaxis-de-express",children:"2- Utilizar la sintaxis de express"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A trav\xe9s de decoradores podemos acceder a los t\xedpicos objetos que manejamos en Express (req , res , next , req.session , req,params , etc)."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/controllers#request-object",children:"Mas informaci\xf3n."})}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Controller, Delete, Get, Patch, Post, Put, Req, Res } from '@nestjs/common';\r\nimport { Request , Response } from 'express';\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n\r\n    @Get('/')\r\n   getAllTasks(@Req() request: Request , @Res() response: Response){\r\n       response.status(200).json({\r\n        message: 'Hello world'\r\n       })\r\n   }\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Gracias a los decoradores tenemos acceso a Request y Response de express."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"m\xe9todos-de-respuesta",children:"M\xe9todos de respuesta"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Existen varios m\xe9todos que brindan Nest que te permiten devolver una respuesta con un c\xf3digo de estado diferente al \u201cpor defecto\u201d."}),"\n",(0,r.jsx)(n.li,{children:"Por ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"   @Get('/')\r\n   getAllTasks(){\r\n     throw new NotFoundException('Tarea no encontrada');\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lanzas una excepci\xf3n con el m\xe9todo NotFoundException() que la maneja Nest para devolver una respuesta con el c\xf3digo de estado 404 con un mensaje (el que especificamos en el par\xe1metro)."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/exception-filters#built-in-http-exceptions",children:"\xa1Existe un m\xe9todo para cada c\xf3digo de estado asique te invito a investigar!"})}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"http-status-error",children:"Http status error"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n podemos cambiar el c\xf3digo de estado por defecto de la respuesta, con un decorador:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"   @Get('/')\r\n    @HttpCode(404)\r\n   getAllTasks(){\r\n       return 'No encontrada';\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el decorador @HttpCode(X) especificamos que el c\xf3digo de estado de la respuesta debe ser X."}),"\n",(0,r.jsx)(n.li,{children:"En este ejemplo remplazamos el c\xf3digo de estado por defecto (que en este caso seria 200) por el 404."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"httpexception",children:"HttpException"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HttpException es una clase que se utiliza para lanzar excepciones que maneja Nest para generar una respuesta a una petici\xf3n HTTP."}),"\n",(0,r.jsx)(n.li,{children:"Cuando quieres devolver una respuesta con un c\xf3digo de error espec\xedfico (como 404, 403, 500, etc.), puedes usar HttpException para hacerlo de manera sencilla. Esta clase te permite controlar tanto el mensaje como el c\xf3digo de estado de la respuesta."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, HttpException, HttpStatus, Post, Put} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n  @Get('/')\r\n getAllTasks(){\r\n  throw new HttpException('Mensaje', HttpStatus.FORBIDDEN);\r\n }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'En este ejemplo, se lanza una excepci\xf3n que genera una respuesta HTTP con el c\xf3digo 403 (Forbidden) y el mensaje "Mensaje".'}),"\n",(0,r.jsxs)(n.li,{children:["Parametros de HttpException:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1: El mensaje de error que ser\xe1 devuelto al cliente en la respuesta HTTP. Puede ser un string simple, y es lo que el usuario ver\xe1 como parte del cuerpo de la respuesta."}),"\n",(0,r.jsx)(n.li,{children:'2: El c\xf3digo de estado que indica el tipo de error. En este caso, HttpStatus.FORBIDDEN es equivalente al c\xf3digo 403. NestJS proporciona una enumeraci\xf3n (HttpStatus) que facilita el uso de c\xf3digos de estado HTTP en lugar de escribir directamente los n\xfameros (por ejemplo, 403 para "Forbidden").'}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n puedes personalizar m\xe1s la respuesta, incluyendo un objeto con informaci\xf3n adicional:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  @Get('/')\r\n getAllTasks(){\r\n  throw new HttpException(\r\n    {\r\n      status: HttpStatus.FORBIDDEN,\r\n      error: 'This is a custom message',\r\n    },\r\n    HttpStatus.FORBIDDEN,\r\n  );\r\n }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Parametros de HttpException:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["1: Un objeto que contiene m\xe1s informaci\xf3n que un simple mensaje:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"status: Define el c\xf3digo de estado HTTP (en este caso, HttpStatus.FORBIDDEN o 403)."}),"\n",(0,r.jsx)(n.li,{children:"error: Este es un mensaje m\xe1s personalizado, que puede incluir m\xe1s detalles sobre el error."}),"\n",(0,r.jsx)(n.li,{children:"Puedes agregar otros campos en este objeto, seg\xfan lo que quieras devolver al cliente. El objeto ser\xe1 convertido a JSON y enviado como parte de la respuesta HTTP."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["2: C\xf3digo de estado HTTP (HttpStatus.FORBIDDEN):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Al igual que en el primer ejemplo, este es el c\xf3digo de estado HTTP."}),"\n",(0,r.jsx)(n.li,{children:"Aunque ya se indic\xf3 el c\xf3digo en el objeto de respuesta, se vuelve a pasar como un segundo par\xe1metro porque HttpException siempre espera recibir expl\xedcitamente el c\xf3digo de estado aqu\xed."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/exception-filters",children:"Mas informaci\xf3n en su sitio web."})}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"body",children:"Body"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con un decorador tenemos acceso al body de una petici\xf3n:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, Patch, Post, Put, Req, Res } from '@nestjs/common';\r\nimport { Request , Response } from 'express';\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n\r\n    @Get('/')\r\n   getAllTasks(@Req() request: Request , @Res() response: Response){\r\n       response.status(200).json({\r\n        message: 'Hello world'\r\n       })\r\n   }\r\n\r\n   \r\n   @Post('/')\r\n   createTask(@Body() task: any){\r\n    console.log('Informacion recibida del body' , task);\r\n    return 'Creando tarea'\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El par\xe1metro que tiene el decorador @Body() contiene el valor de req.body."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"query",children:"Query"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con un decorador tenemos acceso a los query de una petici\xf3n:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, Patch, Post, Put, Query, Req, Res } from '@nestjs/common';\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n   \r\n\r\n    @Get('/')\r\n   getAllTasks(@Query() query : any){\r\n    console.log(\"Informacion recibida por query\" , query);\r\n       return 'Obteniendo tareas';\r\n   }\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El par\xe1metro que tiene el decorador @Query() contiene el valor de req.query"}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"params",children:"Params"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cuando especificamos el endpoint (url) en el decorador que indica el tipo de petici\xf3n, podemos usar el signo \u201c:\u201d para crear params."}),"\n",(0,r.jsxs)(n.li,{children:["La sintaxis es \u201c",":nombreParams","\u201d al igual que en Express.js:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  @Get('/:id')\r\n  getTask(@Param() param ){\r\n   console.log(\"Informacion recibida por param\" , param );\r\n      return 'Obteniendo tareas';\r\n  }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El par\xe1metro que tiene el decorador @Param() contiene el valor de req.params."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Aunque podemos acceder a un valor directamente de esta manera:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  @Get('/:id')\r\n  getTask(@Param('id') param ){\r\n   console.log(\"Informacion recibida por param\" , param );\r\n      return 'Obteniendo tareas';\r\n  }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El decorador @Param() recibe como par\xe1metro el nombre del param que se quiere acceder, en este ejemplo ser\xeda algo como req.params.id."}),"\n",(0,r.jsx)(n.li,{children:"Podes realizar lo mismo con los decoradores anterior (@body y @query)."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"dto-y-validaci\xf3n",children:"Dto y Validaci\xf3n"}),"\n",(0,r.jsx)(n.h4,{id:"dto-1",children:"Dto"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["El DTO es una interface o clase para especificar:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Qu\xe9 es lo que esperamos recibir"}),"\n",(0,r.jsx)(n.li,{children:"Que informaci\xf3n debe ser \u201cexpuesta\u201d al usuario."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Un DTO describe un objeto que contiene solo los datos necesarios para una operaci\xf3n espec\xedfica, sin incluir l\xf3gica de negocio ni comportamiento."}),"\n",(0,r.jsx)(n.li,{children:"Por lo general creas una carpeta llamada dto dentro de la carpeta del modulo que la va a usar y creas los archivos con nombres como nombreDto.dto.ts"}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="task/dto/create-task.dto.ts"',children:"export interface createTaskDto {\r\n    title : string \r\n    description : string\r\n\r\n}\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"O tambi\xe9n puede ser:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export class createTaskDto {\r\n    title : string \r\n    description : string\r\n\r\n}\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Y en los servicios o controladores los usas para especificar qu\xe9 tipos de datos esperamos recibir o incluso que tipo vamos a retornar para la respuesta:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { createTaskDto } from './dto/create-task.dto';\r\n@Controller('tasks')\r\nexport class TasksController {\r\n  \r\n  \r\n\r\n\r\n   @Get('/')\r\n  getAllTasks(){\r\n    throw new NotFoundException('Tarea no encontrada');\r\n  }\r\n\r\n  \r\n  @Post('/')\r\n  createTask(@Body() task: createTaskDto){\r\n   console.log('Informacion recibida del body' , task);\r\n   return 'Creando tarea'\r\n  }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si lo probaste te dar\xe1s cuenta que solo estamos usando las opciones que nos brinda Typescript para mejorar nuestro autocompletado, pero no hay ninguna validaci\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"validaci\xf3n",children:"Validaci\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Podemos usar las DTO para crear las validaciones."}),"\n",(0,r.jsx)(n.li,{children:"Para realizar las validaciones usaremos dos paquete que nos recomienda Nest: class-validator y class-transformer."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/techniques/validation",children:"Mas informaci\xf3n."})}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"especificar-validaciones",children:"Especificar validaciones"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ahora podemos usar los decoradores que nos brindan class-validator en una DTO para especificar validaciones (NO IMPLEMENTAR):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { IsString, MinLength } from "class-validator"\r\n\r\nexport class createTaskDto {\r\n    @IsString()\r\n    @MinLength(1)\r\n    title : string \r\n\r\n\r\n    @IsString()\r\n    @MinLength(1)\r\n    description : string\r\n\r\n}\r\n\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/typestack/class-validator#validation-decorators",children:"Ver listado de decoradores."}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Al implementar validaciones, es obligatorio que cada campo contenga un decorador que especifique el tipo de dato, como @IsString(). De lo contrario, no ser\xe1n reconocidos como campos."}),"\n"]})}),"\n",(0,r.jsx)(n.h5,{id:"implementar-validaciones",children:"Implementar validaciones"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ahora nos queda implementar las validaciones que especificamos en el dto, en este caso haremos que nuestro controlador utilice las validaciones:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, NotFoundException, Patch, Post, Put, UsePipes, ValidationPipe} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n   \r\n \r\n\r\n    @Get('/')\r\n   getAllTasks(){\r\n     throw new NotFoundException('Tarea no encontrada');\r\n   }\r\n\r\n   @UsePipes(new ValidationPipe())\r\n   @Post('/')\r\n   createTask(@Body() task: createTaskDto){\r\n    console.log('Informacion recibida del body' , task);\r\n    return 'Creando tarea'\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el decorador @UsePipes(new ValidationPipe()) implementamos la validaci\xf3n para el m\xe9todo especifico."}),"\n",(0,r.jsx)(n.li,{children:"@UsePipes es un decorador que indica a Nest que utilice una tuber\xeda (una clase que implementa la interfaz PipeTransform) para transformar o validar los datos de entrada (lo veremos m\xe1s tarde)."}),"\n",(0,r.jsx)(n.li,{children:"new ValidationPipe() crea una instancia de la clase ValidationPipe, que es una tuber\xeda incorporada en Nest que realiza la validaci\xf3n basada en los metadatos de validaci\xf3n (por ejemplo, decoradores como @IsString(), @MinLength(), etc.) que se especific\xf3 en la dto."}),"\n",(0,r.jsx)(n.li,{children:"La tuber\xeda ValidationPipe en NestJS utiliza class-validator para realizar la validaci\xf3n de los datos de entrada."}),"\n",(0,r.jsxs)(n.li,{children:["La validaci\xf3n se realiza de la siguiente manera:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Nest crea una instancia de la clase ValidationPipe."}),"\n",(0,r.jsx)(n.li,{children:"La tuber\xeda ValidationPipe analiza los metadatos (decoradores) de validaci\xf3n aplicados a los datos de una dto(en este caso, createTaskDto)."}),"\n",(0,r.jsx)(n.li,{children:"La tuber\xeda ValidationPipe verifica si los datos de entrada cumplen con las reglas de validaci\xf3n definidas en los metadatos."}),"\n",(0,r.jsx)(n.li,{children:"Si los datos de entrada son v\xe1lidos, la tuber\xeda ValidationPipe devuelve los datos de entrada sin modificarlos."}),"\n",(0,r.jsx)(n.li,{children:"Si los datos de entrada son inv\xe1lidos, la tuber\xeda ValidationPipe lanza una excepci\xf3n ValidationException que es manejada por Nest devolviendo una respuesta con c\xf3digo de estado 400 y indicando los errores de validaciones."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n podemos hacer que se apliquen validaciones en toda la aplicaci\xf3n, sin importa que controlador sea."}),"\n",(0,r.jsx)(n.li,{children:"Para esto en el archivo principal, main.ts:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  await app.listen(3000);\r\n}\r\nbootstrap();\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En lugar de usar el decorador @UsePipes, usamos el m\xe9todo useGlobalPipes que contiene la aplicaci\xf3n que se crea."}),"\n",(0,r.jsx)(n.li,{children:"Con el m\xe9todo useGlobalPipes le indicamos a Nest que use una tuber\xeda en toda la aplicaci\xf3n (en todas las peticiones b\xe1sicamente)."}),"\n",(0,r.jsx)(n.li,{children:"De esta manera las validaciones se van a implementar en todas las peticiones de la aplicaci\xf3n en la que se utilizan una DTO con validaciones."}),"\n"]})}),"\n",(0,r.jsx)(n.h5,{id:"whitelist",children:"Whitelist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Podemos configurar la tuber\xeda ValidationPipe() para que elimine los campos o propiedades que no figuren en el DTO."}),"\n",(0,r.jsx)(n.li,{children:"Para esto hacemos lo siguiente:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  app.useGlobalPipes(new ValidationPipe({\r\n    whitelist : true\r\n  }));\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ValidationPipe puede aceptar un objeto con varias opciones. Cuando configuras whitelist en true, autom\xe1ticamente elimina cualquier propiedad que no est\xe9 definida en el DTO (Data Transfer Object). Esto ayuda a asegurar que solo los datos esperados pasen a las funciones de los controladores, aumentando la seguridad y limpieza del proceso de validaci\xf3n."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Ahora  hacemos una petici\xf3n a ",(0,r.jsx)(n.a,{href:"http://localhost:3000/tasks",children:"http://localhost:3000/tasks"})," con el siguiente body:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "title" : "titulo" ,\r\n  "description" : "campo extra" ,\r\n  "campo extra" : "campo extra"\r\n}\r\n\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El \u201ccampo extra\u201d se elimina del body antes de que llegue al controlador gracias a la tuber\xeda."}),"\n",(0,r.jsx)(n.li,{children:"Una tuber\xeda sirve para modificar o validar datos antes de que llegue al controlador (lo veremos m\xe1s adelante)."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"pipe",children:"Pipe"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un Pipe (tuber\xeda) es una clase con el decorador @Injectable(), la cual implementa la interface PipeTransform."}),"\n",(0,r.jsxs)(n.li,{children:["Los pipes en NestJS tienen dos usos principales:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Transformaci\xf3n: Convierte los datos de entrada en el formato deseado. Por ejemplo, podr\xedas convertir un dato que te llega como texto (string) en un n\xfamero entero (integer)."}),"\n",(0,r.jsx)(n.li,{children:"Validaci\xf3n: Eval\xfaa los datos de entrada para ver si son correctos. Si los datos son v\xe1lidos, se dejan pasar tal cual; si no, el pipe genera un error."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"En ambos casos, los pipes funcionan sobre los par\xe1metros (datos) que recibe un m\xe9todo del controlador (la informaci\xf3n que llega a una ruta espec\xedfica de tu aplicaci\xf3n). Antes de que el m\xe9todo del controlador se ejecute, NestJS coloca un pipe(tuber\xeda), para que reciba los datos, los transforme o los valide, y luego pase esos datos al controlador. Es en este momento cuando ocurre cualquier transformaci\xf3n o validaci\xf3n, y despu\xe9s, el m\xe9todo del controlador se llama con los par\xe1metros modificados (si es necesario)."}),"\n",(0,r.jsx)(n.li,{children:"NestJS ya incluye varios pipes predefinidos que puedes usar directamente. Tambi\xe9n puedes crear tus propios pipes personalizados.\r\nEn resumen, los pipes interceptan los datos antes de que lleguen al m\xe9todo del controlador, los validan o transforman, y luego los pasan al m\xe9todo del controlador."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"por-qu\xe9-se-llaman-tuber\xeda",children:"\xbfPor qu\xe9 se llaman tuber\xeda?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Comparar un pipe con una "tuber\xeda" viene de c\xf3mo funcionan: tal como una tuber\xeda transporta agua de un punto a otro, los pipes en NestJS "transportan" los datos de entrada hacia el m\xe9todo del controlador. Durante este proceso, pueden "filtrar" los datos (valid\xe1ndolos) o "modificarlos" (transform\xe1ndolos) antes de que lleguen a su destino.'}),"\n",(0,r.jsx)(n.li,{children:"Es decir, el pipe act\xfaa como un conducto por el que pasan los datos, pero antes de que lleguen al controlador, pueden ser revisados (validaci\xf3n) o cambiados (transformaci\xf3n)."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"pipes-predefinidos",children:"Pipes predefinidos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Se puede adjuntar un pipe a un dato en espec\xedfico:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, HttpCode, Param, ParseIntPipe, Patch, Post, Put} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n   \r\n \r\n    \r\n   @Get('/:number')\r\n   getAllTasks(@Param('number',ParseIntPipe) num : number){\r\n       return num + 10;\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Los valores que recibimos por param generalmente son String asique usamos el pipe ParseIntPipe que viene de Nest para convertir el valor en int."}),"\n",(0,r.jsx)(n.li,{children:"Como puedes ver en el segundo par\xe1metro de algunos decoradores pod\xe9s especificar los pipes a aplicar para ese dato en espec\xedfico."}),"\n",(0,r.jsx)(n.li,{children:"En este caso estamos aplicando una tuber\xeda solo para el dato que contiene el param number, el valor de number pasa por esta tuber\xeda, se aplica una transformaci\xf3n (se vuelve en int) y luego se lo pasa ya transformado al m\xe9todo del controlador."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Otro ejemplo convirtiendo el valor en booleano:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, Param, ParseBoolPipe, Post, Put} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n   \r\n \r\n    \r\n   @Get('/:boolean')\r\n   getAllTasks(@Param('boolean', ParseBoolPipe) boolean : boolean){\r\n       return boolean\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"pipe-personalizado",children:"Pipe personalizado"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para este ejemplo usaremos este endpoint:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'   @Get(\'/\')\r\n   getAllTasks(@Query() query: {name: string , age: number}){\r\n    console.log("age" , typeof query.age);\r\n    console.log("name" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age} a\xf1os  `\r\n   }\r\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Podemos generar un pipe con el comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest generate pipe [Nombre]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Este comando genera un archivo base para definir un pipe personalizado."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El pipe se ver\xeda as\xed:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { ArgumentMetadata, HttpException, HttpStatus, Injectable, PipeTransform } from '@nestjs/common';\r\nimport { isNumber } from 'class-validator';\r\n\r\n@Injectable()\r\nexport class ValidatePipe implements PipeTransform {\r\n  transform(value: any, metadata: ArgumentMetadata) {\r\n    console.log(value);\r\n    console.log(metadata);\r\n    const ageNumber = parseInt(value.age.toString() , 10);\r\n    if (isNaN(ageNumber)) {\r\n        throw new HttpException('La edad debe ser un numero' , HttpStatus.BAD_REQUEST);\r\n    }\r\n    return {...value , age: ageNumber};\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un pipe debe implementar el  m\xe9todo transform que es el encargado de validar o transformar los datos de entrada antes de que lleguen al m\xe9todo del controlador. Se ejecuta antes de la l\xf3gica del controlador y permite modificar o validar datos como el cuerpo de la solicitud (body), los par\xe1metros (params), o las consultas (query), asegurando que la informaci\xf3n ingresada cumpla con los requisitos antes de ser procesada."}),"\n",(0,r.jsxs)(n.li,{children:["El m\xe9todo transform en un pipe personalizado recibe dos par\xe1metros clave:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"value: Este es el primer par\xe1metro, y representa los datos de entrada que se desean validar o transformar. Dependiendo de la solicitud HTTP, estos datos pueden provenir del cuerpo de la petici\xf3n (body), de los par\xe1metros de ruta (params), de las consultas (query), entre otros. Es el objeto principal que el pipe debe manipular o verificar para asegurar que cumpla con los criterios establecidos antes de que llegue al m\xe9todo del controlador."}),"\n",(0,r.jsx)(n.li,{children:"metadata: Este es el segundo par\xe1metro, un objeto que contiene informaci\xf3n adicional sobre la ejecuci\xf3n del pipe. Incluye detalles como el tipo de dato que se est\xe1 manejando (por ejemplo, body, query, params) y el tipo de m\xe9todo que lo est\xe1 recibiendo (si es un m\xe9todo de GET, POST, etc.)."}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Algunas de sus opciones son:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Metatype: Representa el constructor de la clase que pertenece el par\xe1metro value. Es decir, indica el tipo de dato que se espera para el valor que se est\xe1 procesando en el pipe. Cuando ves algo como metatype: [Function: Object], significa que el dato recibido en value est\xe1 siendo interpretado como un objeto gen\xe9rico, no una instancia de una clase espec\xedfica. Si no has especificado un tipo de dato concreto para los par\xe1metros del m\xe9todo del controlador, NestJS por defecto asume que el tipo es Object, y por lo tanto el metatype en el pipe ser\xe1 [Function: Object]."}),"\n",(0,r.jsx)(n.li,{children:"Type:  Indica el origen de los datos que est\xe1 recibiendo el pipe. Los valores pueden ser: query , body , param y header."}),"\n",(0,r.jsx)(n.li,{children:"Data: Contiene informaci\xf3n adicional asociada al par\xe1metro espec\xedfico que est\xe1 siendo procesado. Contiene los metadatos que est\xe1n asociados a decoradores."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"El m\xe9todo transform en un pipe personalizado devuelve el valor transformado o validado que luego se pasar\xe1 al m\xe9todo del controlador. B\xe1sicamente, lo que el pipe devuelve es lo que finalmente recibe el controlador como parametro."}),"\n",(0,r.jsxs)(n.li,{children:["Entonces:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si devuelves el valor sin modificarlo: El controlador recibir\xe1 el dato tal como fue enviado originalmente en la solicitud."}),"\n",(0,r.jsx)(n.li,{children:"Si transformas o validas el valor: El valor modificado o validado ser\xe1 el que llegue al controlador."}),"\n",(0,r.jsxs)(n.li,{children:["Si los datos no cumplen con ciertas validaciones, puedes lanzar una excepci\xf3n (",(0,r.jsx)(n.a,{href:"/documentacion2/docs/nest/#httpexception",children:"ver M\xe9todos de respuesta"}),") en lugar de devolver un valor."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["En este ejemplo:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Se toma el valor de la propiedad age del objeto value, y se convierte a un n\xfamero entero con parseInt()."}),"\n",(0,r.jsx)(n.li,{children:"Si el valor de age no es un n\xfamero (es decir, si ageNumber es NaN), se lanza una excepci\xf3n con un c\xf3digo de estado 400 Bad Request utilizando HttpException, devolviendo un mensaje personalizado: 'La edad debe ser un n\xfamero'."}),"\n",(0,r.jsx)(n.li,{children:"Si la conversi\xf3n es exitosa, se devuelve el objeto original (value), pero con la propiedad age convertida a un n\xfamero."}),"\n",(0,r.jsx)(n.li,{children:"Este pipe se asegura de que el valor de la propiedad age sea un n\xfamero. Si no lo es, lanza un error HTTP 400 (Bad Request). Si la validaci\xf3n pasa, devuelve el objeto original con age ya convertido a un n\xfamero."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lo implementamos:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get, Param, ParseBoolPipe, Post, Put, Query} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\nimport { ValidatePipe } from './pipes/validate/validate.pipe';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n   \r\n \r\n    \r\n   @Get('/')\r\n   getAllTasks(@Query(ValidatePipe) query: {name: string , age: number}){\r\n    console.log(\"age\" , typeof query.age);\r\n    console.log(\"name\" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age} a\xf1os  `\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En el decorador @Query () especificamos directamente las tuber\xedas(pipe) en el primer par\xe1metro para que se apliquen a TODAS las query. Sucede lo mismo en los otros decoradores."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"guards",children:"Guards"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es una clase que implementa el decorador @Inyectable() que implementa la interface CanActivate."}),"\n",(0,r.jsxs)(n.li,{children:["La funci\xf3n de un Guard es controlar si una solicitud puede acceder o no a un endpoint (m\xe9todo del controlador) en funci\xf3n de permisos o autenticaci\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Autorizaci\xf3n: Se refiere a si el usuario tiene los permisos necesarios para acceder a una ruta espec\xedfica."}),"\n",(0,r.jsx)(n.li,{children:"Autenticaci\xf3n: Normalmente est\xe1 vinculada con validar la identidad de un usuario mediante tokens o credenciales."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"diferencia-con-middleware",children:"Diferencia con middleware"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El middleware es una funci\xf3n intermedia que se ejecuta antes que el m\xe9todo del controlador. Sin embargo, el middleware no sabe qu\xe9 se va a ejecutar despu\xe9s de llamar a next (). Solo hace su tarea y pasa la solicitud, sin importar qu\xe9 viene despu\xe9s."}),"\n",(0,r.jsx)(n.li,{children:'Los guards son m\xe1s "inteligentes" que el middleware porque tienen acceso a una instancia llamada ExecutionContext. Esto les da informaci\xf3n sobre qu\xe9 se ejecutar\xe1 a continuaci\xf3n, despu\xe9s de que el guard termine su trabajo. Esto es importante porque permite a los guards tomar decisiones m\xe1s precisas basadas en su contexto.'}),"\n",(0,r.jsx)(n.li,{children:'Los guards, est\xe1n dise\xf1ados para permitir que coloques l\xf3gica espec\xedfica (como validar permisos) en el momento exacto que se necesita en el ciclo de solicitud/respuesta. Esto mantiene tu c\xf3digo m\xe1s limpio, sin duplicar l\xf3gica en varios lugares (DRY, que significa "Don\'t Repeat Yourself").'}),"\n",(0,r.jsx)(n.li,{children:"Los guards se ejecutan despu\xe9s de que todo el middleware ha hecho su trabajo, pero antes de que entren en juego los interceptores (Interceptors) o las tuber\xedas (pipe). Esto los coloca en una posici\xf3n ideal para manejar la autorizaci\xf3n, ya que pueden decidir si la solicitud debe continuar antes de que se realicen m\xe1s operaciones en ella."}),"\n",(0,r.jsx)(n.li,{children:"Un buen uso de los guards es controlar el acceso a rutas espec\xedficas, donde solo ciertos usuarios (por ejemplo, usuarios autenticados con permisos adecuados) pueden acceder. Un ejemplo com\xfan es un AuthGuard, que valida que un token de autenticaci\xf3n est\xe9 presente en la solicitud, lo extrae y verifica si el usuario tiene permiso para continuar."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"crear-un-guard",children:"Crear un guard"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para crear un Guard usamos el siguiente comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest generate guard [Nombre]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crea un archivo base para definir un guard."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El Guard se ver\xeda as\xed:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TasksGuard implements CanActivate {\r\n  canActivate(\r\n    context: ExecutionContext,\r\n  ): boolean | Promise<boolean> | Observable<boolean> {\r\n    // console.log(context);\r\n    \r\n    // Obtenemos el request\r\n    const request = context.switchToHttp().getRequest() as Request;\r\n    console.log(request.url);\r\n    if (request.url === '/tasks') return false;\r\n    return true;\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un Guard debe implementar el m\xe9todo canActivate , que devuelve un valor booleano o una promesa/observable que resuelve a true o false. Si devuelve true, la solicitud puede continuar y llegar al controlador; si devuelve false, se bloquea el acceso al endpoint y se devuelve una respuesta 403."}),"\n",(0,r.jsx)(n.li,{children:"El par\xe1metro ExecutionContext contiene un objeto que tiene acceso a la solicitud y contexto de ejecuci\xf3n (en pocas palabras contiene informaci\xf3n de la petici\xf3n, que es mucha m\xe1s completa que un middleware). Se puede usar para obtener detalles de la solicitud HTTP, los par\xe1metros, la autenticaci\xf3n, etc. B\xe1sicamente encapsula toda la informaci\xf3n de la solicitud y su contexto, permiti\xe9ndote acceder a datos espec\xedficos seg\xfan el tipo de transporte que se est\xe9 utilizando (HTTP, WebSocket, gRPC, etc.). Esto te permite manejar y personalizar la l\xf3gica de autorizaci\xf3n, interceptaci\xf3n y manejo de errores de manera efectiva en diversos entornos de aplicaci\xf3n."}),"\n",(0,r.jsxs)(n.li,{children:["Algunos de sus m\xe9todos son:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"switchToHttp(): Esto transforma el contexto en un contexto HTTP, lo que te permite obtener la solicitud y respuesta HTTP"}),"\n",(0,r.jsx)(n.li,{children:"getHandler(): Obtiene el manejador (handler) actual, es decir, el m\xe9todo del controlador que est\xe1 siendo ejecutado. Esto es \xfatil si quieres acceder a las anotaciones o metadatos del manejador, como los decoradores."}),"\n",(0,r.jsx)(n.li,{children:"getClass(): Devuelve la clase del controlador en la que se encuentra el manejador que est\xe1 siendo ejecutado."}),"\n",(0,r.jsx)(n.li,{children:"getArgs(): Devuelve un arreglo con los argumentos que fueron pasados al manejador, dependiendo del tipo de contexto (HTTP, RPC, WebSocket, etc.)."}),"\n",(0,r.jsx)(n.li,{children:"getType(): Devuelve el tipo de transporte (HTTP, WebSocket, etc.). Esto es \xfatil si est\xe1s desarrollando una aplicaci\xf3n con m\xfaltiples tipos de transporte y necesitas actuar de manera diferente seg\xfan el tipo de solicitud."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"En este ejemplo, si la URL no tiene ninguna QUERY le bloqueamos el acceso."}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"Contexto de ejecuci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'El "contexto de ejecuci\xf3n" se refiere al entorno de ejecuci\xf3n donde se ejecuta una pieza de c\xf3digo.'}),"\n",(0,r.jsx)(n.li,{children:"En NestJS, cambiar de contexto te permite acceder a informaci\xf3n espec\xedfica de un tipo de solicitud o transporte (como HTTP, WebSocket, gRPC, etc.). Esto se logra mediante m\xe9todos proporcionados por el framework que facilitan la adaptaci\xf3n a diferentes contextos."}),"\n",(0,r.jsx)(n.li,{children:"Por ejemplo, cuando trabajas con solicitudes HTTP, puedes usar m\xe9todos como switchToHttp() para acceder a los objetos request y response. Esto es \xfatil cuando necesitas manejar solicitudes HTTP en tus interceptores, guards, o middlewares."}),"\n",(0,r.jsx)(n.li,{children:"Cambiar de contexto en NestJS es una t\xe9cnica que te permite acceder a la informaci\xf3n de un tipo de solicitud o transporte (HTTP, WebSocket, gRPC, etc.). Utilizando m\xe9todos como switchToHttp(), switchToWs(), o switchToRpc(), puedes manejar diferentes tipos de solicitudes de manera flexible y estandarizada, lo que facilita la adaptaci\xf3n de tu c\xf3digo a distintos entornos y tipos de comunicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Cambiar de contexto en NestJS te proporciona un objeto que te permite acceder a la informaci\xf3n espec\xedfica del tipo de transporte o contexto en el que se est\xe1 ejecutando el c\xf3digo. Este enfoque estandariza c\xf3mo se accede a la informaci\xf3n relevante seg\xfan el tipo de solicitud o transporte."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/fundamentals/execution-context#current-application-context",children:"Mas informaci\xf3n."})}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"implementar-guards",children:"Implementar guards"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el decorador @UseGuards implementamos los guard:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get,  Post, Put, Query, UseGuards} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\nimport { ValidatePipe } from './pipes/validate/validate.pipe';\r\nimport { TasksGuard } from './tasks.guard';\r\n\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n \r\n  @UseGuards(TasksGuard)\r\n   @Get('/')\r\n   getAllTasks(@Query(ValidatePipe) query: {name: string , age: number}){\r\n    console.log(\"age\" , typeof query.age);\r\n    console.log(\"name\" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age + 20} a\xf1os  `\r\n   }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Como solo estamos decorando un m\xe9todo del controlador, solo se implementar\xeda en ese endpoint espec\xedfico."}),"\n",(0,r.jsx)(n.li,{children:"El par\xe1metro del decorador @UseGuards especifica los Guards a implementar."}),"\n",(0,r.jsx)(n.li,{children:"En este ejemplo estamos implementando el Guard que creamos en el endpoint get de tasks. Ahora cada vez que se haga una petici\xf3n get a /tasks se ejecutara el guard despu\xe9s del middleware (si contiene alguno)."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"middleware",children:"Middleware"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un middleware es una funci\xf3n que se ejecuta antes de que se ejecute el m\xe9todo de un controlador."}),"\n",(0,r.jsxs)(n.li,{children:["Las funciones middleware pueden realizar las siguientes tareas:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ejecutar cualquier c\xf3digo."}),"\n",(0,r.jsx)(n.li,{children:"Hacer cambios en los objetos de solicitud y respuesta."}),"\n",(0,r.jsx)(n.li,{children:"Finalizar el ciclo de solicitud-respuesta (devolver una respuesta)."}),"\n",(0,r.jsx)(n.li,{children:"Llamar a la siguiente funci\xf3n middleware en la pila (o al m\xe9todo del controlador)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:'Si un middleware no finaliza el ciclo de solicitud-respuesta, necesita llamar a la funci\xf3n next(). Esto permite que el siguiente middleware en la pila sea ejecutado (o el m\xe9todo del controlador si no hay ning\xfan middleware m\xe1s). Si no se llama a next(), la solicitud se queda "colgada", es decir, no llega a su destino.'}),"\n",(0,r.jsx)(n.li,{children:"Nest usa el mismo concepto de middleware que Express, por lo que cualquier persona que conozca Express podr\xe1 usar middleware en Nest de manera similar."}),"\n",(0,r.jsx)(n.li,{children:"Nest permite que los middleware utilicen inyecci\xf3n de dependencias, lo que significa que pueden acceder a servicios u otras clases del mismo m\xf3dulo a trav\xe9s del constructor, similar a c\xf3mo se har\xeda en controladores o servicios."}),"\n",(0,r.jsx)(n.li,{children:"Puedes implementar middleware usando una clase (donde aplicas el decorador @Injectable() y la interfaz NestMiddleware para hacerla m\xe1s robusta), o simplemente con una funci\xf3n, que es m\xe1s directa y no tiene requisitos especiales."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"generar-middleware",children:"Generar middleware"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ejecutamos el comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest g middleware [nombre]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crea un archivo base para definir un middleware."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Se ver\xeda as\xed:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\n\r\n@Injectable()\r\nexport class TasksMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: () => void) {\r\n    next();\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El m\xe9todo use() es la funci\xf3n que se ejecutara antes del m\xe9todo del controlador y contiene los tres par\xe1metros de Express.js"}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"implementar-middleware",children:"Implementar middleware"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Los middlewares se implementan en el m\xf3dulo que va a contener los controladores (Acordate que un middleware en NestJS es una funci\xf3n que se ejecuta antes de que una solicitud llegue al controlador)."}),"\n",(0,r.jsx)(n.li,{children:"Entonces en el m\xf3dulo de task:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\r\nimport { TasksController } from './tasks.controller';\r\nimport { TasksService } from './tasks.service';\r\nimport { TasksMiddleware } from './tasks.middleware';\r\n\r\n@Module({\r\n  controllers: [TasksController],\r\n  providers: [TasksService]\r\n})\r\nexport class TasksModule implements NestModule {\r\n   configure(consumer: MiddlewareConsumer) {\r\n       consumer.apply(TasksMiddleware).forRoutes('tasks')\r\n   }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La clase que representa el m\xf3dulo, debe implementar la interfaz NestModule. Esto es necesario cuando se quiere implementar el middleware dentro de un m\xf3dulo. Esta interfaz obliga a la clase a tener el m\xe9todo configure, que es donde se define qu\xe9 middleware se va a aplicar y a qu\xe9 rutas."}),"\n",(0,r.jsxs)(n.li,{children:["El m\xe9todo configure es parte de la interfaz NestModule. Aqu\xed es donde realmente configuras el middleware:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"consumer: MiddlewareConsumer: Este par\xe1metro del m\xe9todo configure es una instancia de la clase MiddlewareConsumer, que te permite aplicar uno o varios middlewares a las rutas del m\xf3dulo:"}),"\n",(0,r.jsx)(n.li,{children:"apply(): M\xe9todo del MiddlewareConsumer que indica qu\xe9 middleware se va a aplicar. En este caso, se est\xe1 aplicando el middleware TasksMiddleware."}),"\n",(0,r.jsx)(n.li,{children:"forRoutes(): M\xe9todo que indica a qu\xe9 rutas se va a aplicar el middleware. En este caso, se aplicar\xe1 a todas las rutas 'tasks'."}),"\n",(0,r.jsx)(n.li,{children:"Apply() devuelve un objeto que permite seguir configurando c\xf3mo y d\xf3nde debe aplicarse el middleware mediante m\xe9todos encadenados como forRoutes(), exlude() , etc\u2026"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cambiamos solo para la ruta GET:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\r\nimport { TasksController } from './tasks.controller';\r\nimport { TasksService } from './tasks.service';\r\nimport { TasksMiddleware } from './tasks.middleware';\r\n\r\n@Module({\r\n  controllers: [TasksController],\r\n  providers: [TasksService]\r\n})\r\nexport class TasksModule implements NestModule {\r\n   configure(consumer: MiddlewareConsumer) {\r\n       consumer.apply(TasksMiddleware).forRoutes({\r\n         path: '/tasks' , method: RequestMethod.GET\r\n       })\r\n   }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Podemos especificar un objeto para indicar en qu\xe9 tipo de petici\xf3n de la ruta/endpoint (path) se va a implementar el middleware."}),"\n",(0,r.jsx)(n.li,{children:"En este ejemplo solo se implementa en las peticiones GET de la ruta /tasks."}),"\n",(0,r.jsx)(n.li,{children:"Podes especificar varios objetos para indicar los diferentes tipos de peticiones para un middleware y muchas otras cosas, te toca chequear la documentaci\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"ejemplo-de-un-middleware-de-autenticaci\xf3n",children:"Ejemplo de un Middleware de autenticaci\xf3n"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { HttpException, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\n\r\n@Injectable()\r\nexport class TasksMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: () => void) {\r\n    const {authorization} = req.headers;\r\n    if (!authorization) {\r\n      throw new HttpException('Unathorized' , HttpStatus.UNAUTHORIZED);\r\n    }\r\n    next();\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interceptors-1",children:"Interceptors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un interceptor es una clase con el decorador @Inyectable que implementa la interfaz NestInterceptor."}),"\n",(0,r.jsx)(n.li,{children:"Los interceptores en NestJS se inspiran en la t\xe9cnica de Programaci\xf3n Orientada a Aspectos (AOP), que permite aplicar l\xf3gica adicional alrededor de la ejecuci\xf3n de m\xe9todos, sin modificar directamente el c\xf3digo del m\xe9todo en cuesti\xf3n. Esto significa que los interceptores pueden influir en el comportamiento de los controladores y servicios de NestJS de diversas maneras, como ejecutar l\xf3gica antes y despu\xe9s de un m\xe9todo, transformar su resultado, o incluso anular la ejecuci\xf3n completa del m\xe9todo bajo condiciones espec\xedficas."}),"\n",(0,r.jsxs)(n.li,{children:["Permiten:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Vincular l\xf3gica antes y despu\xe9s de la ejecuci\xf3n de un m\xe9todo:\r\nLos interceptores permiten ejecutar c\xf3digo tanto antes de que un controlador o m\xe9todo de servicio se ejecute como despu\xe9s de su finalizaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Transformar el resultado devuelto por una funci\xf3n:\r\nDespu\xe9s de que un m\xe9todo devuelva una respuesta, el interceptor puede modificar el resultado antes de enviarlo de vuelta al cliente."}),"\n",(0,r.jsx)(n.li,{children:"Transformar excepciones lanzadas por una funci\xf3n:\r\nSi un m\xe9todo lanza una excepci\xf3n, el interceptor puede capturarla y manejarla o transformarla en un mensaje diferente."}),"\n",(0,r.jsx)(n.li,{children:"Ampliar el comportamiento de una funci\xf3n b\xe1sica:\r\nEl interceptor puede agregar l\xf3gica adicional que no est\xe1 presente en el m\xe9todo original, ampliando su funcionalidad sin modificar el c\xf3digo del controlador o servicio."}),"\n",(0,r.jsx)(n.li,{children:"Anular una funci\xf3n dependiendo de condiciones espec\xedficas:"}),"\n",(0,r.jsx)(n.li,{children:"En ciertos casos, el interceptor puede decidir no ejecutar el m\xe9todo del controlador, por ejemplo, si la respuesta ya est\xe1 en cach\xe9 y no es necesario recalcularla."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"metodo-intercept",children:"Metodo intercept()"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cada interceptor implementa el m\xe9todo intercept(). Este m\xe9todo toma dos argumentos principales:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["ExecutionContext:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Este objeto proporciona detalles sobre el contexto en el que se est\xe1 ejecutando el m\xe9todo, como el tipo de transporte (HTTP, WebSocket, etc.), los argumentos de la solicitud, o incluso los detalles de autenticaci\xf3n. Los interceptores pueden usar estos detalles para construir l\xf3gica m\xe1s gen\xe9rica que funcione en una amplia gama de controladores y m\xe9todos. ",(0,r.jsx)(n.a,{href:"/documentacion2/docs/nest/#crear-un-guard",children:"Este mismo objeto se utiliza en los guards"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["CallHandler:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Este objeto proporciona el m\xe9todo handle(), que se usa para invocar el m\xe9todo del controlador de ruta. Si handle() no es llamado dentro de intercept(), el m\xe9todo del controlador no se ejecutar\xe1."}),"\n",(0,r.jsx)(n.li,{children:"Como handle() devuelve un Observable, podemos aplicar operadores de RxJS para manipular la respuesta antes de devolverla al cliente."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"primer-ejemplo",children:"Primer ejemplo"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TasksInterceptor implements NestInterceptor {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    console.log('Before...');\r\n\r\n    const now = Date.now();\r\n    return next\r\n      .handle()\r\n      .pipe(\r\n        tap(() => console.log(`After... ${Date.now() - now}ms`)),\r\n      );\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lo pod\xe9s generar con el comando \u201cnest generate interceptor [nombre]\u201d."}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"Explicaci\xf3n del c\xf3digo",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Todo Interceptor tiene el m\xe9todo ",(0,r.jsx)(n.code,{children:"intercept"})," (te obliga la interfaz ",(0,r.jsx)(n.code,{children:"NestInterceptor"}),"), el cual tiene dos par\xe1metros:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context: ExecutionContext"}),": Proporciona informaci\xf3n sobre el contexto de la ejecuci\xf3n actual, como el tipo de transporte (HTTP, WebSocket, etc.) y los detalles de la solicitud."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"next: CallHandler"}),": Proporciona el m\xe9todo ",(0,r.jsx)(n.code,{children:"handle()"})," que se encarga de ejecutar el m\xe9todo que maneja la solicitud."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Flujo dentro del m\xe9todo ",(0,r.jsx)(n.code,{children:"intercept"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"console.log('Before...')"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Esta l\xednea imprime el mensaje ",(0,r.jsx)(n.code,{children:'"Before..."'})," en la consola antes de que se ejecute el m\xe9todo del controlador. Esto sirve para registrar cuando el interceptor est\xe1 siendo invocado antes de que el m\xe9todo del controlador sea llamado."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"const now = Date.now()"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Esta l\xednea captura el momento actual en milisegundos para medir cu\xe1nto tarda en ejecutarse el m\xe9todo del controlador."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"return next.handle().pipe(...)"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["El m\xe9todo ",(0,r.jsx)(n.code,{children:"handle()"})," del ",(0,r.jsx)(n.code,{children:"CallHandler"})," es invocado aqu\xed. Este m\xe9todo ejecuta el controlador correspondiente (el m\xe9todo del controlador que maneja la solicitud entrante)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipe()"}),": Es un m\xe9todo de los Observables de RxJS que permite manipular o reaccionar a la respuesta del m\xe9todo."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tap(() => console.log(After... ${Date.now() - now}ms))"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["El operador ",(0,r.jsx)(n.code,{children:"tap()"})," es usado para realizar una acci\xf3n sin modificar el valor de la respuesta del controlador. Aqu\xed, se usa para imprimir el tiempo transcurrido desde que se captur\xf3 ",(0,r.jsx)(n.code,{children:"now"})," hasta que el controlador termin\xf3 de ejecutarse. Este c\xe1lculo se hace restando ",(0,r.jsx)(n.code,{children:"Date.now()"})," (el tiempo actual despu\xe9s de la ejecuci\xf3n) del valor de ",(0,r.jsx)(n.code,{children:"now"})," (el tiempo capturado antes de la ejecuci\xf3n)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["As\xed, el mensaje ",(0,r.jsx)(n.code,{children:'"After... Xms"'})," se imprimir\xe1, donde ",(0,r.jsx)(n.code,{children:"X"})," es el tiempo que tard\xf3 en ejecutarse el m\xe9todo del controlador en milisegundos."]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para implementar el interceptor, simplemente lo especificamos en el controlador (se implementa en todos los m\xe9todos) o m\xe9todo que lo va a usar mediante el decorador @UseInterceptors():"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Body, Controller, Delete, Get,  Post, Put, Query, UseInterceptors} from '@nestjs/common';\r\nimport { createTaskDto } from './dto/create-task.dto';\r\nimport { ValidatePipe } from './pipes/validate/validate.pipe';\r\nimport { ApiTags } from '@nestjs/swagger';\r\nimport { queryTaskDto } from './dto/query-task.dto';\r\nimport { TasksInterceptor } from './tasks.interceptor';\r\n\r\n@ApiTags('task')\r\n@Controller('tasks')\r\nexport class TasksController {\r\n\r\n  @UseInterceptors(TasksInterceptor)\r\n   @Get('/')\r\n   getAllTasks(@Query(ValidatePipe) query: queryTaskDto){\r\n    console.log(\"age\" , typeof query.age);\r\n    console.log(\"name\" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age + 20} a\xf1os  `\r\n   }\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El Interceptor que creamos antes se especifica en el decorador @UseInterceptors. Esto significa que cuando se ejecute el m\xe9todo del controlador, tambi\xe9n se ejecutar\xe1 el interceptor que creamos."}),"\n",(0,r.jsxs)(n.li,{children:["Puedes usar el decorador @UseInterceptors en dos lugares:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["En la clase del controlador:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si aplicas @UseInterceptors a la clase del controlador, el interceptor se aplicar\xe1 a todos los m\xe9todos dentro de esa clase."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["En un m\xe9todo espec\xedfico del controlador:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si aplicas @UseInterceptors a un m\xe9todo espec\xedfico, el interceptor solo se aplicar\xe1 a ese m\xe9todo en particular."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"As\xed que, en resumen, @UseInterceptors se puede usar a nivel de clase para afectar todos los m\xe9todos del controlador o a nivel de m\xe9todo para afectar solo el m\xe9todo espec\xedfico."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"interceptor-global",children:"Interceptor global"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La aplicaci\xf3n de Nest tiene el m\xe9todo useGlobalInterceptors() para poder especificar los interceptores que se van a implementar de manera global (en toda la aplicaci\xf3n)."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { TasksInterceptor } from './tasks/tasks.interceptor';\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule );\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    whitelist : true\r\n  }));\r\napp.useGlobalInterceptors(new TasksInterceptor());\r\n  await app.listen(3000);\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Le pasamos una instancia de la clase que contiene el interceptor al m\xe9todo useGlobalInterceptors()."}),"\n",(0,r.jsx)(n.li,{children:"El interceptor que le indicamos al m\xe9todo se va a implementar en todos los controladores de la aplicaci\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"segundo-ejemplo",children:"Segundo ejemplo"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vamos a modificar el primer ejemplo para poder manipular la respuesta:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface Response<T> {\r\n  nuevaPropiedad: T;\r\n}\r\n@Injectable()\r\nexport class TasksInterceptor<T> implements NestInterceptor<T, Response<T>> {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\r\n    return next.handle().pipe(map(data => ({ nuevaPropiedad : data })));\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Explicaci\xf3n del c\xf3digo",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TasksInterceptor<T>"}),": Esta clase es un interceptor gen\xe9rico en NestJS. ",(0,r.jsx)(n.code,{children:"T"})," es un tipo gen\xe9rico que define el tipo de datos que el interceptor manejar\xe1. Implementa la interfaz ",(0,r.jsx)(n.code,{children:"NestInterceptor"}),". Al ser gen\xe9rico, puede trabajar con cualquier tipo de dato."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NestInterceptor<T, Response<T>>"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"T"}),": Es el tipo de dato que el interceptor recibir\xe1 como entrada, es decir, el resultado que devuelve el m\xe9todo del controlador. Por ejemplo, si el m\xe9todo del controlador devuelve un ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"T"})," ser\xeda ",(0,r.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Response<T>"}),": Es el tipo de dato que el interceptor devolver\xe1. Esto significa que el interceptor transformar\xe1 el resultado en un objeto que tendr\xe1 la estructura definida por ",(0,r.jsx)(n.code,{children:"Response"}),", donde ",(0,r.jsx)(n.code,{children:"nuevaPropiedad"})," contendr\xe1 el dato original de tipo ",(0,r.jsx)(n.code,{children:"T"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"next.handle().pipe(map(data => ({ nuevaPropiedad: data })))"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"next.handle()"}),": Devuelve un ",(0,r.jsx)(n.code,{children:"Observable"})," que emite el resultado del m\xe9todo del controlador."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pipe(map(data => ({ nuevaPropiedad: data })))"}),": Usa el operador ",(0,r.jsx)(n.code,{children:"map"})," de RxJS para transformar el resultado. En lugar de devolver el resultado original (",(0,r.jsx)(n.code,{children:"data"}),"), envuelve el resultado en un objeto con una propiedad ",(0,r.jsx)(n.code,{children:"nuevaPropiedad"})," cuyo valor es el resultado original."]}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entonces el endpoint donde implementamos el interceptor quedar\xeda as\xed:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'   @Get(\'/\')\r\n   getAllTasks(@Query(ValidatePipe) query: queryTaskDto){\r\n    console.log("age" , typeof query.age);\r\n    console.log("name" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age + 20} a\xf1os  `\r\n   }\r\n\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Valor de T en TasksInterceptor<T>: T es el valor que devuelve el m\xe9todo del controlador:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El m\xe9todo retorna un string, ya que la respuesta es una cadena que incluye el nombre y la edad."}),"\n",(0,r.jsx)(n.li,{children:"As\xed, cuando se usa el interceptor en este contexto, se puede deducir que T es string."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["NestInterceptor<T, Response<T>>:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"T: es string (lo que devuelve el m\xe9todo del controlador)."}),"\n",(0,r.jsx)(n.li,{children:"Response<T>: se convierte en Response<string>."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Conclusi\xf3n: Los tipos gen\xe9ricos se deducen del tipo de datos que el m\xe9todo del controlador devuelve. En este caso, dado que el m\xe9todo devuelve un string, se infiere que el interceptor manejar\xe1 cadenas y retornar\xe1 un objeto que encapsula esa cadena en una propiedad nuevaPropiedad. Esto permite que el interceptor se ajuste a diferentes tipos de datos en otros m\xe9todos, haci\xe9ndolo m\xe1s flexible y reusable."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/interceptors#interceptors",children:"Mas informaci\xf3n."})}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"base-de-datos-prisma",children:"Base de datos prisma"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/recipes/prisma",children:"Documentaci\xf3n de prisma."})}),"\n",(0,r.jsx)(n.li,{children:"Prisma es una herramienta que facilita la interacci\xf3n con bases de datos en aplicaciones Node.js y TypeScript. En lugar de escribir consultas SQL a mano o utilizar otras herramientas que ayudan a construir consultas SQL (como knex.js) o usar otros ORM (como TypeORM y Sequelize), Prisma ofrece una manera de gestionar la base de datos de una forma m\xe1s estructurada y segura."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"qu\xe9-hace-prisma",children:"\xbfQu\xe9 hace Prisma?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ORM (Object-Relational Mapping): Prisma act\xfaa como un intermediario entre tu c\xf3digo y la base de datos. Te permite manipular base de datos usando objetos y clases, en lugar de tener que escribir SQL directamente."}),"\n",(0,r.jsx)(n.li,{children:"Alternativa a SQL y otras herramientas: Prisma se puede considerar como una alternativa a escribir SQL directamente o a usar otros generadores de consultas SQL y ORM que ya existen. Es decir, en lugar de construir consultas SQL manualmente o usar otras bibliotecas que lo hacen, puedes usar Prisma para interactuar con tu base de datos de manera m\xe1s conveniente."}),"\n",(0,r.jsx)(n.li,{children:"Soporte para varias bases de datos: Prisma actualmente es compatible con varias bases de datos, incluyendo PostgreSQL, MySQL, SQL Server, SQLite, MongoDB y CockroachDB (aunque el soporte para CockroachDB est\xe1 en una fase preliminar)."}),"\n",(0,r.jsx)(n.li,{children:'Integraci\xf3n con TypeScript: Aunque puedes usar Prisma con JavaScript puro, est\xe1 dise\xf1ado para integrarse muy bien con TypeScript. Esto significa que Prisma ofrece un nivel alto de "seguridad de tipos", lo que ayuda a evitar errores de tipo y a proporcionar una mejor experiencia de desarrollo cuando se usa TypeScript. La seguridad de tipos es una caracter\xedstica importante en TypeScript que ayuda a garantizar que los tipos de datos se utilicen correctamente en el c\xf3digo.'}),"\n",(0,r.jsx)(n.li,{children:"Comparaci\xf3n con otros ORM: Prisma proporciona garant\xedas de seguridad de tipos que superan a las que ofrecen otros ORM en el ecosistema de TypeScript. Esto significa que ofrece una mayor protecci\xf3n y confiabilidad en el uso de los tipos de datos en comparaci\xf3n con otras herramientas como TypeORM."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"ORM",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ORM es una t\xe9cnica de programaci\xf3n que permite interactuar con una base de datos relacional utilizando objetos y clases en lugar de escribir consultas SQL directamente. B\xe1sicamente, el ORM act\xfaa como un intermediario entre tu c\xf3digo y la base de datos, traduciendo las operaciones que realizan los objetos en operaciones de bases de datos."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"instalamos-prisma",children:"Instalamos prisma"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npm install prisma --save-dev\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Paquete prisma",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Es el CLI de Prisma"}),"\n",(0,r.jsxs)(n.li,{children:["Este paquete contiene herramientas para ejecutar comandos como:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"prisma init: para inicializar un proyecto de Prisma."}),"\n",(0,r.jsx)(n.li,{children:"prisma migrate: para crear y aplicar migraciones a la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"prisma generate: para generar el cliente Prisma basado en el esquema definido."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"No es necesario que este paquete est\xe9 en producci\xf3n, ya que solo se utiliza durante el desarrollo."}),"\n",(0,r.jsx)(n.li,{children:"Se encarga de generar y ejecutar los scripts SQL que modifican la estructura de la base de datos. La CLI es la que realiza estos cambios directamente en la base de datos."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inicializamos prisma:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npx prisma init\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crea una carpeta llamada prisma, este va a contener toda la configuraci\xf3n y tablas de la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Crea un archivo .ENV con una variable para se\xf1alar la URL de conexi\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"ejecutamos-una-bd-en-postgesql-en-docker",children:"Ejecutamos una BD en Postgesql en docker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"docker run -p5432:5432 -e POSTGRES_PASSWORD=123 -e POSTGRES_DB=demodb  -e POSTGRES_USER=usuario  -d postgres  \n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Iniciamos postgres con una BD que se llama demodb con el usuario:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"user: usuario"}),"\n",(0,r.jsx)(n.li,{children:"password: 123"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"archivo-env",children:"Archivo .env"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'DATABASE_URL="postgresql://usuario:123@localhost:5432/demodb?schema=public"\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Modificamos la URL de conexi\xf3n para que se pueda conectar a la Base de datos de docker (f\xedjate donde puse los datos)."}),"\n",(0,r.jsx)(n.li,{children:"En La mayor\xeda de los ORM te conectas a una BD por una URL de conexi\xf3n como la que contiene la variable de entorno DATABASE_URL, te invito a que investigues m\xe1s sobre el tema!"}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"schemaprisma",children:"Schema.prisma"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'generator client {\r\n  provider = "prisma-client-js"\r\n}\r\n\r\ndatasource db {\r\n  provider = "postgresql"\r\n  url      = env("DATABASE_URL")\r\n}\r\n\r\nmodel User {\r\n  id String @id @default(cuid())\r\n  email String @unique\r\n  name String?\r\n  password String \r\n  createdAt DateTime @default(now())\r\n  updateAt DateTime @updatedAt\r\n}\r\n\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"generator client: Especifica qu\xe9 paquete o herramienta Prisma va a usar para generar el cliente. Por defecto, Prisma usa prisma-client-js, que es el que genera el cliente para JavaScript/TypeScript. Este cliente generado es una instancia que contiene m\xe9todos como create(), .findMany(), .update(), etc., para que puedas realizar operaciones en la base de datos desde tu c\xf3digo sin necesidad de escribir SQL. El cliente contiene los m\xe9todos para consultar, insertar, actualizar y eliminar datos. En resumen: Crea un \u201cobjeto\u201d con m\xfaltiples m\xe9todos para manipular la BD que se especific\xf3 en este archivo."}),"\n",(0,r.jsxs)(n.li,{children:["datasource db: Aqu\xed se especifica a que base de datos se conectara","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"provider: Especifica el tipo de base de datos que se est\xe1 utilizando. En este caso, postgresql indica que se est\xe1 usando una base de datos PostgreSQL."}),"\n",(0,r.jsx)(n.li,{children:'url: Es la URL de conexi\xf3n a la base de datos. env("DATABASE_URL") indica que Prisma debe obtener la URL de conexi\xf3n desde una variable de entorno llamada DATABASE_URL. Esto es \xfatil para mantener la configuraci\xf3n sensible fuera del c\xf3digo fuente.'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Por ultimo cada \u201cmodel\u201d representa una tabla en la base de datos, en este caso definimos un modelo (model) llamado User con los siguientes campos:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id String @id @default(cuid())"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"id: Es el nombre del campo"}),"\n",(0,r.jsx)(n.li,{children:"String: Es el tipo de dato del campo id, que es una cadena de texto."}),"\n",(0,r.jsx)(n.li,{children:"@id: Indica que este campo es la clave primaria(primary key) de la tabla."}),"\n",(0,r.jsx)(n.li,{children:"@default(cuid()): Establece un valor predeterminado para el campo id, que es generado autom\xe1ticamente usando una funci\xf3n cuid() (Create Unique ID)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"email String @unique"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"email: Es el nombre del campo"}),"\n",(0,r.jsx)(n.li,{children:"@unique: Asegura que el valor del campo email sea \xfanico en la tabla, es decir, no puede haber dos usuarios con el mismo correo electr\xf3nico."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name String?"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"name: Es el nombre del campo"}),"\n",(0,r.jsx)(n.li,{children:"String?: El signo de interrogaci\xf3n (?) indica que este campo es opcional, por lo que puede ser null."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"password String"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"password: Es el nombre del campo"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"createdAt DateTime @default(now())"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"createdAt: Es el nombre del campo"}),"\n",(0,r.jsx)(n.li,{children:"DateTime: Es el tipo de dato del campo, que es una fecha y hora."}),"\n",(0,r.jsx)(n.li,{children:"@default(now()): Establece que el valor predeterminado de este campo sea la fecha y hora actual en el momento de la creaci\xf3n del registro."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"updateAt DateTime @updatedAt"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"updateAt: Es el nombre del campo"}),"\n",(0,r.jsx)(n.li,{children:"DateTime: Es el tipo de dato del campo, que es una fecha y hora."}),"\n",(0,r.jsx)(n.li,{children:"@updatedAt: Indica que este campo se actualizar\xe1 autom\xe1ticamente cada vez que el registro sea modificado."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Como te dar\xe1s cuentas se usan decoradores para especificar validaciones, restricciones o funciones t\xedpicas de una BD."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"comando-migrate",children:"Comando migrate"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ejecutamos el siguiente comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npx prisma migrate dev --name init\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["migrate dev: Es un comando especifico de prima que se utiliza para:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Detectar cambios en el esquema de tu base de datos. Prisma compara el archivo schema.prisma (donde defines los modelos y relaciones de la base de datos) con la estructura actual de la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Crear una nueva migraci\xf3n que refleja esos cambios."}),"\n",(0,r.jsx)(n.li,{children:"Aplicar autom\xe1ticamente esos cambios a la base de datos."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"El --name permite asignar un nombre a la migraci\xf3n. En este caso, la migraci\xf3n se llama init (que suele usarse para indicar que es la primera migraci\xf3n, la inicializaci\xf3n de la base de datos)."}),"\n",(0,r.jsx)(n.li,{children:"Este nombre es importante porque ayuda a identificar de qu\xe9 se trata cada migraci\xf3n. Si m\xe1s adelante haces otro cambio en el esquema, podr\xedas usar algo como --name add-users-table para que sea f\xe1cil reconocer qu\xe9 hace esa migraci\xf3n en particular."}),"\n",(0,r.jsxs)(n.li,{children:["Cuando ejecutas el comando npx prisma migrate dev --name init, lo que sucede es lo siguiente:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Prisma revisa el archivo schema.prisma para ver si hay cambios en los modelos de la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Genera un archivo de migraci\xf3n (en una carpeta como prisma/migrations) que contiene los comandos necesarios (en SQL) para aplicar esos cambios en la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Aplica esos cambios a la base de datos, asegurando que tu esquema est\xe9 actualizado."}),"\n",(0,r.jsx)(n.li,{children:"Guarda esa migraci\xf3n bajo el nombre init, para que puedas rastrear f\xe1cilmente qu\xe9 cambios fueron hechos."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{title:"Migraci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Las migraciones son como un historial de cambios. Cada vez que realizas un cambio en el dise\xf1o de la base de datos, creas una nueva "migraci\xf3n" que contiene las instrucciones necesarias para aplicar esos cambios. Esta migraci\xf3n se guarda como un archivo de texto que tiene el SQL o c\xf3digo espec\xedfico para modificar la base de datos.'}),"\n",(0,r.jsx)(n.li,{children:"Prisma, como ORM, facilita este proceso al permitirte describir tu base de datos en un archivo de esquema (schema.prisma). Luego, Prisma genera autom\xe1ticamente las migraciones necesarias al comparar tu esquema con el estado actual de la base de datos. As\xed, no necesitas escribir manualmente el SQL, solo describes los cambios en el esquema, y Prisma se encarga del resto."}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"servicio-para-conectarte-a-la-base-de-datos",children:"Servicio para conectarte a la Base de datos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instalamos el paquete para el cliente:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npm install @prisma/client\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Este paquete contiene las clases y m\xe9todos que permiten hacer consultas a la base de datos con Prisma, como prisma.user.findMany() o prisma.post.create()."}),"\n",(0,r.jsx)(n.li,{children:"Este paquete s\xed es necesario en producci\xf3n, ya que es el que permite la conexi\xf3n y consulta a la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Es el paquete que prisma utilizara para crear una clase (se llama cliente) que permita manipular la base de datos que especificamos en el esquema."}),"\n",(0,r.jsx)(n.li,{children:"Durante la instalaci\xf3n de @prisma/client, se invoca autom\xe1ticamente el comando prisma generate para crear el cliente basado en los modelos definidos en el archivo schema.prisma."}),"\n",(0,r.jsx)(n.li,{children:"Despu\xe9s de esa instalaci\xf3n inicial, cada vez que hagas un cambio en tus modelos (por ejemplo, agregues una nueva tabla o modifiques una existente), deber\xe1s ejecutar prisma generate para que Prisma actualice el cliente con los cambios reflejados en tu esquema. Esto asegura que el cliente generado siempre est\xe9 alineado con la estructura actual de tu base de datos."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En la carpeta src creamos el archivo prisma.service.ts que ser\xe1 un servicio que interact\xfae con la BD"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class PrismaService extends PrismaClient implements OnModuleInit {\r\n  async onModuleInit() {\r\n    await this.$connect();\r\n  }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Hereda la clase PrismaClient."}),"\n",(0,r.jsx)(n.li,{children:"La clase PrismaClient es la que Prisma genera y contiene todos los m\xe9todos para interactuar con tu base de datos (como .findMany(), .create(), .update(), etc.)."}),"\n",(0,r.jsx)(n.li,{children:"La Clase PrismaClient es el \u201ccliente\u201d que genera Prisma."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En alg\xfan controlador lo podemos usar, en nuestro caso ser\xe1 uno de User, para esto en su servicio:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable } from '@nestjs/common';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { PrismaService } from 'src/prisma.service';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  constructor(private prisma: PrismaService){}\r\n  findAll() {\r\n    return this.prisma.user.findMany();\r\n  }\r\n  create(user: CreateUserDto) {\r\n    return this.prisma.user.create({data : user });\r\n  }\r\n\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} user`;\r\n  }\r\n\r\n  update(id: number, updateUserDto: UpdateUserDto) {\r\n    return `This action updates a #${id} user`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} user`;\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cada propiedad del servicio es un modelo \xf3sea una tabla de la BD que se defini\xf3 en el archivo schema.prisma."}),"\n",(0,r.jsx)(n.li,{children:"Por ejemplo, si ten\xe9s un modelo User en tu esquema, el cliente Prisma tendr\xe1 una propiedad user que representa esa tabla."}),"\n",(0,r.jsx)(n.li,{children:"Cada propiedad del cliente (user, post, etc.) tiene m\xe9todos para manipular la tabla que representa su modelo. Estos m\xe9todos incluyen operaciones b\xe1sicas de CRUD (crear, leer, actualizar y eliminar)."}),"\n",(0,r.jsxs)(n.li,{children:["Por ejemplo:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findMany()"})," : Regresa todas las filas del modelo"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"create({data: X})"})," : Crea una fila usando los valores de la propiedad data. X debe ser un objeto donde cada propiedad es una columna de la fila."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-client/queries/crud",children:"Para m\xe1s informaci\xf3n consulte en la documentaci\xf3n."})}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"a-probar-el-c\xf3digo",children:"A probar el c\xf3digo!"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A estas alturas ya deber\xedas tener el conocimiento suficiente para hacer los cambios correspondientes para probar este c\xf3digo."}),"\n",(0,r.jsx)(n.li,{children:"Si vas a implementar ValidationPipe(), deber\xedas a\xf1adir decoradores en el DTO para especificar el tipo de dato (como @IsString()) de cada campo. De lo contrario, no ser\xe1n reconocidos como campos y ser\xe1n eliminados con whitelist: true."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"swagger",children:"Swagger"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.nestjs.com/openapi/introduction",children:"Nest nos ofrece la opcion de poder usar swagger."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://flevatti.github.io/documentacion/docs/C--/API#swagger",children:"\xbfQu\xe9 es swagger?"})}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"lo-instalamos-en-el-proyecto",children:"Lo instalamos en el proyecto"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ejecutamos el comando:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"npm install --save @nestjs/swagger\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En main.ts:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    whitelist : true\r\n  }));\r\n  const config = new DocumentBuilder()\r\n  .setTitle('Cats example')\r\n  .setDescription('The cats API description')\r\n  .setVersion('1.0')\r\n  .addTag('cats')\r\n  .build();\r\nconst document = SwaggerModule.createDocument(app, config);\r\nSwaggerModule.setup('api', app, document);\r\n  await app.listen(3000);\r\n}\r\nbootstrap();\r\n\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"const config = new DocumentBuilder()"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Crea una instancia de DocumentBuilder, que es una clase proporcionada por NestJS para construir una configuraci\xf3n personalizada para Swagger."}),"\n",(0,r.jsx)(n.li,{children:"Objetivo: Inicializar el objeto config para configurar el t\xedtulo, descripci\xf3n, versi\xf3n y otros detalles del documento Swagger."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".setTitle('Cats example')"})," :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Configura el t\xedtulo de la documentaci\xf3n de la API que se mostrar\xe1 en Swagger."}),"\n",(0,r.jsx)(n.li,{children:'Objetivo: Define que el t\xedtulo de la documentaci\xf3n ser\xe1 "Cats example".'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".setDescription('The cats API description')"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Configura una descripci\xf3n para la API."}),"\n",(0,r.jsx)(n.li,{children:'Objetivo: Describe que esta API es sobre "The cats API description".'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".setVersion('1.0')"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Especifica la versi\xf3n de la API."}),"\n",(0,r.jsx)(n.li,{children:'Objetivo: Define que la versi\xf3n de la API es "1.0".'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".addTag('cats')"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'\xbfQu\xe9 hace?: A\xf1ade una etiqueta (tag) llamada "cats", que sirve para organizar o categorizar los endpoints relacionados con gatos. Es importante aclarar que solo crea la etiqueta, no asigna autom\xe1ticamente todos los endpoint a esta.'}),"\n",(0,r.jsx)(n.li,{children:'Objetivo: Etiquetar los endpoints de la API relacionados con "cats" para que se puedan agrupar en la documentaci\xf3n.'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".build();"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Finaliza la configuraci\xf3n del objeto config y lo devuelve completamente construido."}),"\n",(0,r.jsx)(n.li,{children:"Objetivo: Completar la creaci\xf3n del documento de configuraci\xf3n para Swagger."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"const document = SwaggerModule.createDocument(app, config);"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Crea el documento Swagger a partir de la configuraci\xf3n config y la instancia de la aplicaci\xf3n app."}),"\n",(0,r.jsx)(n.li,{children:"Objetivo: Genera la documentaci\xf3n que describe todos los endpoints y modelos de la API, usando la configuraci\xf3n previamente establecida."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SwaggerModule.setup('api', app, document);"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\xbfQu\xe9 hace?: Publica la documentaci\xf3n de la aplicaci\xf3n. El primer par\xe1metro 'api' es el path (ruta) donde estar\xe1 disponible la documentaci\xf3n interactiva (en este caso, /api), app es la aplicaci\xf3n NestJS y document es el documento generado por createDocument()."}),"\n",(0,r.jsx)(n.li,{children:"Objetivo: Publicar la documentaci\xf3n generada en la ruta /api, permitiendo a los usuarios ver la documentaci\xf3n y probar los endpoints de la API directamente desde el navegador."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"decoradores",children:"Decoradores"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Mediante decoradores podemos asignarle una etiqueta a un endpoint."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"etiqueta (tag)",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Una tag en Swagger es como una carpeta (representada como una lista desplegable) que agrupa endpoints."}),"\n",(0,r.jsx)(n.li,{children:"Sirve para organizar y clasificar los endpoints."}),"\n",(0,r.jsxs)(n.li,{children:["Supongamos que tienes una API que gestiona usuarios y productos. Puedes usar dos tags:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Tag "users": Agrupa todos los endpoints relacionados con usuarios, como GET /users para obtener usuarios.'}),"\n",(0,r.jsx)(n.li,{children:'Tag "products": Agrupa todos los endpoints relacionados con productos, como GET /products para obtener productos.'}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el decorador @Apitags le asignamos una etiqueta a un endpoint."}),"\n",(0,r.jsx)(n.li,{children:"Podes asignarle una etiqueta a solo algunos endpoint, decorando solo el m\xe9todo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { ApiTags } from '@nestjs/swagger';\r\n\r\n@Controller('user')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n  \r\n  @ApiTags('user')\r\n  @Post()\r\n  create(@Body() createUserDto: CreateUserDto) {\r\n    console.log(createUserDto);\r\n    return this.userService.create(createUserDto);\r\n  }\r\n\r\n  @ApiTags('user')\r\n  @Get()\r\n  findAll() {\r\n    return this.userService.findAll();\r\n  }\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n podes asignarle una etiqueta a todos los endpoint de un controlador decorando la clase:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('task')\r\n@Controller('tasks')\r\nexport class TasksController {\r\n   \r\n\r\n \r\n  @UseGuards(TasksGuard)\r\n   @Get('/')\r\n   getAllTasks(@Query(ValidatePipe) query: {name: string , age: number}){\r\n    console.log(\"age\" , typeof query.age);\r\n    console.log(\"name\" ,typeof query.name);\r\n       return `Es la tarea de ${query.name}, tiene ${query.age + 20} a\xf1os  `\r\n   }\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el decorador @ApiOperation podemos describir un endpoint, para esto le pasamos un objeto con la propiedad summary, su valor es la descripci\xf3n:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { ApiOperation, ApiTags } from '@nestjs/swagger';\r\n\r\n@Controller('user')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n  \r\n  @ApiTags('user')\r\n  @Post()\r\n  create(@Body() createUserDto: CreateUserDto) {\r\n    console.log(createUserDto);\r\n    return this.userService.create(createUserDto);\r\n  }\r\n\r\n @ApiOperation({summary : 'Get all tasks'})\r\n  @ApiTags('user')\r\n  @Get()\r\n  findAll() {\r\n    return this.userService.findAll();\r\n  }\r\n\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Con el decorador @Apiresponse podemos documentar el c\xf3digo de respuestas de un endpoint, cada objeto que le proporciones es una \u201cposible respuesta\u201d y contiene estas propiedades:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"status: C\xf3digo de respuesta, puede ser 200, 400, etc.."}),"\n",(0,r.jsx)(n.li,{children:"description: La descripci\xf3n, ac\xe1 indicamos que sucede cuando como respuesta nos devuelve el status que especificamos."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\r\n\r\n@Controller('user')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n  \r\n  @ApiTags('user')\r\n  @Post()\r\n  create(@Body() createUserDto: CreateUserDto) {\r\n    console.log(createUserDto);\r\n    return this.userService.create(createUserDto);\r\n  }\r\n\r\n @ApiOperation({summary : 'Get all tasks'})\r\n @ApiResponse({status: 200 , description: 'Return All tasks.'})\r\n @ApiResponse({status: 403 , description: 'Forbidden.'})\r\n  @ApiTags('user')\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.userService.findAll();\r\n  }\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Esto solo son algunos de los decoradores, pero hay muchos m\xe1s\u2026 \xa1Te invito a investigar!"}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"comandos-1",children:"Comandos"}),"\n",(0,r.jsx)(n.h4,{id:"generate",children:"Generate"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Con el siguiente comando generas un elemento de Nest:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"Nest generate [TipoDeArchivo] [Nombre] [Opciones]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Podes remplazar \u201cgenerate\u201d por \u201cg\u201d (es la abreviaci\xf3n de generate)."}),"\n",(0,r.jsx)(n.li,{children:"Tipo de Archivo puede ser controller, service , etc . Tambi\xe9n puedes utilizar abreviaciones como co para controller y s para service."}),"\n",(0,r.jsx)(n.li,{children:"Si el [nombre] es igual al que tiene el m\xf3dulo, se a\xf1ade en la misma carpeta y se hacen las configuraciones correspondientes para que permanezca en este."}),"\n",(0,r.jsx)(n.li,{children:"Si el [Nombre] que proporcionas coincide con el nombre del m\xf3dulo, el archivo se crear\xe1 en la carpeta del m\xf3dulo. No obstante, si usas una sintaxis como: nombreModulo/otraUbicacion/otraUbicacion/nombreArchivo, est\xe1s especificando la ruta exacta donde se guardar\xe1 el archivo dentro del m\xf3dulo. Las carpetas indicadas en otraUbicacion se crear\xe1n autom\xe1ticamente si no existen, y al final se especifica el nombre del archivo."}),"\n",(0,r.jsx)(n.li,{children:"Por ejemplo, en el siguiente comando, se crear\xeda una carpeta pipes adentro de la carpeta task (representa el m\xf3dulo) y en esta se crear\xeda el pipe llamado validate:  nest g pipe task/pipes/validate."}),"\n",(0,r.jsx)(n.li,{children:"Cada elemento viene con su archivo de testing (spect.ts)."}),"\n",(0,r.jsxs)(n.li,{children:["Algunas de las opciones son:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"--no-spect : Sirve para no crear el archivo de testing."}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"generate-resource",children:"Generate resource"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Como te habr\xe1s dado cuenta, cada m\xf3dulo contiene servicios, controladores, dto , etc.."}),"\n",(0,r.jsx)(n.li,{children:"Existe una manera en Nest para crear todos los archivos necesarios para un m\xf3dulo con un solo comando generate:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"nest g resource [nombre]\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Una vez ejecutado el comando, te van a preguntar:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Para qu\xe9 tipo de aplicaci\xf3n es: REST API, GraphQL , Microservice , etc.."}),"\n",(0,r.jsx)(n.li,{children:"Te preguntar\xeda si deseas generar un CRUD b\xe1sico."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Una vez completada las dos preguntas te generara el m\xf3dulo, el controlador, los servicios, dto , entities para el nombre que especificaste. A su vez lo a\xf1adir\xe1 al modulo principal para que lo puedas probar al iniciar la aplicaci\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"cors",children:"Cors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'CORS (Cross-Origin Resource Sharing) es un mecanismo de seguridad que permite a las aplicaciones web hacer solicitudes HTTP a recursos que est\xe1n alojados en un dominio diferente al del de la aplicaci\xf3n. En otras palabras, si tu aplicaci\xf3n se ejecuta en "dominio-a.com" y necesitas acceder a una API en "dominio-b.com", CORS permite que se realicen esas solicitudes de manera controlada y segura. Sin este mecanismo, los navegadores modernos bloquear\xedan las solicitudes entre diferentes dominios debido a restricciones de seguridad, lo que se conoce como pol\xedtica de mismo origen (Same-Origin Policy).'}),"\n",(0,r.jsx)(n.li,{children:'El funcionamiento b\xe1sico de CORS implica que el navegador env\xeda una solicitud especial llamada "preflight request" (solicitud de preevaluaci\xf3n) antes de enviar la solicitud principal. En esta preevaluaci\xf3n, el navegador pregunta al servidor si permite solicitudes desde el dominio de la aplicaci\xf3n que est\xe1 haciendo la petici\xf3n. Si el servidor lo autoriza, incluye ciertos encabezados en su respuesta, indicando qu\xe9 m\xe9todos HTTP y qu\xe9 or\xedgenes est\xe1n permitidos. De esta forma, se establece un control sobre qu\xe9 dominios pueden interactuar con los recursos del servidor, reduciendo el riesgo de ataques como el Cross-Site Scripting (XSS).'}),"\n",(0,r.jsx)(n.li,{children:"Para habilitar las cors , editamos main.ts:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"app.enableCors();\r\n  await app.listen(3000);\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"La aplicaci\xf3n tiene el m\xe9todo enableCors() que habilita los cors."}),"\n",(0,r.jsx)(n.li,{children:"La configuraci\xf3n por defecto admite peticiones de todos los dominios."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El m\xe9todo enableCors() puede recibir como par\xe1metro un objeto de configuraci\xf3n opcional:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"app.enableCors({\r\n  origin: 'https://www.google.com/', // Solo permite solicitudes desde este dominio\r\n  methods: 'GET,POST',           // Permite solo estos m\xe9todos HTTP\r\n  credentials: true,             // Permite el uso de cookies\r\n});\r\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambi\xe9n puedes pasarle un callback para generar la configuraci\xf3n de forma as\xedncrona seg\xfan la solicitud:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"app.enableCors((req, callback) => {\r\n  const corsOptions = { origin: false }; // Configuraci\xf3n por defecto\r\n  if (req.header('Origin') === 'https://example.com') {\r\n    corsOptions.origin = true; // Habilita CORS solo para este dominio\r\n  }\r\n  callback(null, corsOptions); // Devuelve la configuraci\xf3n basada en la solicitud\r\n});\r\n  await app.listen(3000);\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tenemos acceso a la solicitud y el callback en el primer par\xe1metro devolvemos un error y en el segundo el objeto de configuraci\xf3n que se usara para la cors de esa solicitud."}),"\n"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tambien puedes habilitar las cors con el segundo par\xe1metro del m\xe9todo create() que crea la aplicaci\xf3n:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:" const app = await NestFactory.create(AppModule , {cors : true});\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El segundo par\xe1metro del m\xe9todo create() es un objeto de configuraciones y una de esas son las cors."}),"\n",(0,r.jsx)(n.li,{children:"La propiedad cors puede recibir true que es lo mismo que ejecutar el m\xe9todo \u201capp.enableCors()\u201d, tambi\xe9n puede recibir un objeto de configuraci\xf3n o un callback como los ejemplos anteriores."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle-events",children:"Lifecycle Events"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Un ciclo de vida en desarrollo de software describe las etapas por las que pasa un componente o aplicaci\xf3n desde su creaci\xf3n hasta su destrucci\xf3n. Esto incluye la inicializaci\xf3n, la ejecuci\xf3n, el manejo de eventos y finalmente la destrucci\xf3n del objeto o componente."}),"\n",(0,r.jsx)(n.li,{children:"NestJS, al ser un framework modular basado en Node.js, aplica el concepto de ciclo de vida a varios niveles, especialmente en el manejo de servicios, controladores y m\xf3dulos."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"1--m\xf3dulos",children:"1- M\xf3dulos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En NestJS, los m\xf3dulos organizan el c\xf3digo. Cada m\xf3dulo tiene su propio ciclo de vida."}),"\n",(0,r.jsx)(n.li,{children:"Cuando una aplicaci\xf3n NestJS arranca, el m\xf3dulo ra\xedz (AppModule) es el primero en ser cargado. Luego, los subm\xf3dulos son instanciados y configurados en funci\xf3n de sus dependencias."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2--inyecci\xf3n-de-dependencias",children:"2- Inyecci\xf3n de dependencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NestJS sigue un patr\xf3n de inyecci\xf3n de dependencias para administrar servicios. Cuando un servicio es requerido, se instancia autom\xe1ticamente si no existe ya una instancia."}),"\n",(0,r.jsx)(n.li,{children:"Un servicio en NestJS tiene dos posibles ciclos de vida"}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"1--servicio-singleton-instancia-\xfanica",children:"1- Servicio Singleton (Instancia \xfanica)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Por defecto, todos los servicios en NestJS son singleton. Esto significa que solo se crea una instancia del servicio durante toda la vida de la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Una vez creado, esta instancia es compartida entre todos los componentes que lo necesiten (controladores, otros servicios, etc.)."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo: Si un servicio se utiliza en varios controladores, no se crea una nueva instancia del servicio para cada controlador, sino que todos comparten la misma instancia."}),"\n",(0,r.jsxs)(n.li,{children:["Este enfoque tiene varias ventajas:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Eficiencia: Al compartir una sola instancia, no es necesario crear nuevos objetos cada vez que se necesita el servicio."}),"\n",(0,r.jsx)(n.li,{children:"Estado compartido: Si el servicio mantiene alg\xfan estado (como un cach\xe9 en memoria o alguna variable), ese estado ser\xe1 el mismo para todos los que utilicen ese servicio."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"2--servicio-transitorio-vida-corta",children:"2- Servicio Transitorio (Vida corta)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Si un servicio necesita ser transitorio (es decir, crear una nueva instancia cada vez que se necesita), puedes configurar el ciclo de vida para que sea as\xed."}),"\n",(0,r.jsx)(n.li,{children:"Esto significa que cada vez que un componente (como un controlador) necesite el servicio, NestJS crear\xe1 una nueva instancia. Una vez que el trabajo con esa instancia termine, ser\xe1 destruida."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3--controladores",children:"3- Controladores"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Los controladores manejan las solicitudes HTTP y responden con datos"}),"\n",(0,r.jsx)(n.li,{children:"El ciclo de vida de un controlador est\xe1 estrechamente relacionado con las solicitudes que recibe. A continuaci\xf3n, te lo explico paso a paso."}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"creaci\xf3n-del-controlador",children:"Creaci\xf3n del controlador"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Por defecto, los controladores en NestJS se comportan como singleton, lo que significa que, al igual que los servicios, se crea una sola instancia del controlador cuando la aplicaci\xf3n se inicializa."}),"\n",(0,r.jsx)(n.li,{children:"Cuando NestJS arranca la aplicaci\xf3n, se crea una instancia de cada controlador registrado."}),"\n",(0,r.jsx)(n.li,{children:"Esta instancia se mantiene activa durante toda la vida de la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Cada vez que una solicitud HTTP llega a una ruta gestionada por ese controlador, se reutiliza la misma instancia para procesar la solicitud."}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"manejo-de-la-solicitud",children:"Manejo de la solicitud"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cuando una solicitud HTTP llega a un endpoint gestionado por un controlador, sigue este flujo:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Recepci\xf3n de la solicitud:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cuando el cliente (por ejemplo, un navegador o una aplicaci\xf3n m\xf3vil) env\xeda una solicitud HTTP, NestJS enruta esa solicitud al controlador adecuado en funci\xf3n del endpoint."}),"\n",(0,r.jsx)(n.li,{children:"El controlador tiene m\xe9todos decorados con @Get(), @Post(), etc., que est\xe1n asociados a rutas espec\xedficas."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Procesamiento de la solicitud:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El controlador llama a los servicios (que pueden haber sido inyectados en \xe9l) para manejar la l\xf3gica de negocio."}),"\n",(0,r.jsx)(n.li,{children:"Los servicios realizan el trabajo necesario, como consultar una base de datos o aplicar reglas de negocio."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Respuesta al cliente:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Una vez que el controlador ha recibido la informaci\xf3n del servicio (por ejemplo, datos de usuarios), devuelve la respuesta al cliente que hizo la solicitud."}),"\n",(0,r.jsx)(n.li,{children:"Esto podr\xeda ser una respuesta JSON, un archivo o cualquier tipo de dato que el cliente necesita."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"finalizaci\xf3n-de-la-solicitud",children:"Finalizaci\xf3n de la solicitud"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Una vez que el controlador procesa la solicitud y env\xeda la respuesta al cliente:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El ciclo de vida de esa solicitud termina."}),"\n",(0,r.jsx)(n.li,{children:"Sin embargo, el controlador sigue existiendo (si es singleton) y espera m\xe1s solicitudes en el futuro."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"destrucci\xf3n",children:"Destrucci\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'El controlador, al ser singleton, generalmente no se destruye hasta que la aplicaci\xf3n finaliza o se reinicia. Esto es diferente de un ciclo de vida "transitorio", donde una nueva instancia se crea y destruye para cada solicitud.'}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"middleware-y-guards",children:"Middleware y Guards"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Middleware: Pueden interceptar solicitudes antes de que lleguen al controlador, y tienen su propio ciclo de vida dentro de una aplicaci\xf3n Nest."}),"\n",(0,r.jsx)(n.li,{children:"Guards: Son ejecutados antes que cualquier m\xe9todo de controlador para verificar permisos o autenticaci\xf3n, por lo que tambi\xe9n forman parte del ciclo de vida de la solicitud."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"hooks",children:"Hooks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"NestJS tiene un conjunto de eventos del ciclo de vida que permiten ejecutar c\xf3digo en momentos clave como el arranque o apagado de la aplicaci\xf3n. Estos eventos se manejan mediante m\xe9todos de gancho (hooks), que se pueden registrar en m\xf3dulos, servicios (proveedores) o controladores."}),"\n",(0,r.jsxs)(n.li,{children:["NestJS tiene varios m\xe9todos de gancho que puedes usar para controlar estos eventos del ciclo de vida:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"onModuleInit(): Se llama cuando un m\xf3dulo ha sido completamente inicializado."}),"\n",(0,r.jsx)(n.li,{children:"onModuleDestroy(): Se llama cuando un m\xf3dulo est\xe1 a punto de ser destruido (antes de que la aplicaci\xf3n se cierre)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Adem\xe1s, hay otros ganchos que pueden controlarse m\xe1s espec\xedficamente al cerrar la aplicaci\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"beforeApplicationShutdown(): Se ejecuta justo antes de que la aplicaci\xf3n se apague. Aqu\xed puedes hacer operaciones que necesiten realizarse antes de que se cierren conexiones o procesos (por ejemplo, cerrar conexiones a bases de datos)."}),"\n",(0,r.jsx)(n.li,{children:"onApplicationShutdown(): Se llama cuando la aplicaci\xf3n est\xe1 siendo cerrada. Este m\xe9todo te permite ejecutar tareas finales antes de que la aplicaci\xf3n se termine."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"En NestJS, los ganchos de ciclo de vida son m\xe9todos especiales que te permiten ejecutar acciones en momentos clave del ciclo de vida de una aplicaci\xf3n (como la inicializaci\xf3n o el apagado). Estos ganchos est\xe1n representados por interfaces que son implementadas por clases espec\xedficas, como controladores, servicios (proveedores) o m\xf3dulos."}),"\n",(0,r.jsxs)(n.li,{children:["Aunque en TypeScript las interfaces no existen despu\xe9s de la compilaci\xf3n (son eliminadas en el c\xf3digo JavaScript), implementarlas es una buena pr\xe1ctica por varias razones:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Proporcionan tipado est\xe1tico: Esto ayuda a detectar errores en tiempo de compilaci\xf3n y permite obtener sugerencias y autocompletado en el editor."}),"\n",(0,r.jsx)(n.li,{children:"Claridad y mantenimiento: Al implementar una interfaz, queda claro qu\xe9 m\xe9todos y comportamientos se esperan de la clase que la implementa, lo que mejora la legibilidad del c\xf3digo."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:'Cada interfaz de ciclo de vida en NestJS te obliga a declarar el m\xe9todo que se va a ejecutar cuando se active el "evento" especificado. Al implementar una interfaz de ciclo de vida, te comprometes a definir el m\xe9todo que esa interfaz espera, lo que asegura que tu clase responder\xe1 a ese evento del ciclo de vida.'}),"\n",(0,r.jsx)(n.li,{children:"Por ejemplo si implementas la interfaz OnModuleInit, debes definir el m\xe9todo onModuleInit(), que se ejecutar\xe1 cuando el m\xf3dulo haya sido completamente inicializado."}),"\n",(0,r.jsx)(n.li,{children:"Ejemplo en un Servicio:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { CreateUserDto } from './dto/create-user.dto';\r\nimport { UpdateUserDto } from './dto/update-user.dto';\r\nimport { PrismaService } from 'src/prisma.service';\r\n\r\n@Injectable()\r\nexport class UserService  implements OnModuleInit{\r\n\r\n  onModuleInit() {\r\n    console.log('Se inicializo el modulo')\r\n  }\r\n\r\n  constructor(private prisma: PrismaService){}\r\n  findAll() {\r\n    return this.prisma.user.findMany();\r\n  }\r\n  create(user: CreateUserDto) {\r\n    console.log(user);\r\n    return this.prisma.user.create({data : user });\r\n  }\r\n\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} user`;\r\n  }\r\n\r\n  update(id: number, updateUserDto: UpdateUserDto) {\r\n    return `This action updates a #${id} user`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} user`;\r\n  }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Observaci\xf3n",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El m\xe9todo onModuleInit() se ejecutar\xe1 autom\xe1ticamente cuando el m\xf3dulo al que pertenece esta clase (en este caso, UserService) haya sido completamente inicializado. Esto ocurre despu\xe9s de que NestJS haya creado todas las instancias de los proveedores (servicios) definidos en el m\xf3dulo y haya completado la configuraci\xf3n inicial."}),"\n",(0,r.jsx)(n.li,{children:"Esto significa que el onModuleInit() se invocar\xe1 una vez que el contenedor de Nest haya terminado de construir el m\xf3dulo que incluye UserService. La funci\xf3n se ejecuta antes de que se comiencen a manejar las solicitudes HTTP o se interact\xfae con otros componentes de la aplicaci\xf3n."}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"entity",children:"Entity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Las entidades(entity) son clases que representan una tabla de la BD y cada instancia puede ser una fila de esta."}),"\n",(0,r.jsx)(n.li,{children:"Se utilizan para interactuar directamente con la base de datos. Cuando quieres guardar, buscar, actualizar o eliminar un registro, usas las entidades."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"diferencia-con-dto",children:"Diferencia con DTO"}),"\n",(0,r.jsx)(n.h5,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entidades: Representan la estructura de los datos en la base de datos. Se utilizan para definir c\xf3mo se almacenan los datos."}),"\n",(0,r.jsx)(n.li,{children:"DTOs: Se utilizan para enviar y recibir datos a trav\xe9s de la API. Sirven para validar y estructurar los datos en las solicitudes y respuestas."}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"interraci\xf3n",children:"Interraci\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entidades: Interact\xfaan directamente con la base de datos (por ejemplo, realizar operaciones CRUD)."}),"\n",(0,r.jsx)(n.li,{children:"DTOs: Se utilizan en la capa de controlador para manejar y validar la entrada/salida de datos."}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"estructura-y-decoradores",children:"Estructura y decoradores"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entidades: Usan decoradores de un ORM (como TypeORM) para definir la estructura de la base de datos, incluyendo columnas y relaciones."}),"\n",(0,r.jsx)(n.li,{children:"DTOs: Usan decoradores de validaci\xf3n (como class-validator) para definir y validar la estructura de los datos que se env\xedan y reciben, pero no tienen l\xf3gica de base de datos."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var r=a(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);